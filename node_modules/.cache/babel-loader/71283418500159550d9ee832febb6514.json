{"ast":null,"code":"export var getCount=function getCount(count){if(count<0)return;if(count<10000){return count;}else if(Math.floor(count/10000)<10000){return Math.floor(count/10000)+\"万\";}else{return Math.floor(count/10000000)/10+\"亿\";}};export var debounce=function debounce(func,delay){var timer;return function(){var _this=this;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}if(timer){clearTimeout(timer);}timer=setTimeout(function(){func.apply(_this,args);clearTimeout(timer);},delay);};};//处理数据，找出第一个没有歌名的排行榜的索引\nexport var filterIndex=function filterIndex(rankList){for(var i=0;i<rankList.length-1;i++){if(rankList[i].tracks.length&&!rankList[i+1].tracks.length){return i+1;}}};//处理歌手列表拼接歌手名字\nexport var getName=function getName(list){var str=\"\";list.map(function(item,index){str+=index===0?item.name:\"/\"+item.name;return item;});return str;};//判断一个对象是否为空\nexport var isEmptyObject=function isEmptyObject(obj){return!obj||Object.keys(obj).length===0;};//转换歌曲播放时间\nexport var formatPlayTime=function formatPlayTime(interval){interval=interval|0;var minute=interval/60|0;var second=(interval%60).toString().padStart(2,\"0\");return\"\".concat(minute,\":\").concat(second);};// 给css3相关属性增加浏览器前缀，处理浏览器兼容性问题\nvar elementStyle=document.createElement(\"div\").style;var vendor=function(){//首先通过transition属性判断是何种浏览器\nvar transformNames={webkit:\"webkitTransform\",Moz:\"MozTransform\",O:\"OTransfrom\",ms:\"msTransform\",standard:\"Transform\"};for(var key in transformNames){if(elementStyle[transformNames[key]]!==undefined){return key;}}return false;}();export function prefixStyle(style){if(vendor===false){return false;}if(vendor===\"standard\"){return style;}return vendor+style.charAt(0).toUpperCase()+style.substr(1);}//拼接出歌曲的url链接\nexport var getSongUrl=function getSongUrl(id){return\"https://music.163.com/song/media/outer/url?id=\".concat(id,\".mp3\");};function getRandomInt(min,max){return Math.floor(Math.random()*(max-min+1)+min);}// 随机算法\nexport function shuffle(arr){var new_arr=[];arr.forEach(function(item){new_arr.push(item);});for(var i=0;i<new_arr.length;i++){var j=getRandomInt(0,i);var t=new_arr[i];new_arr[i]=new_arr[j];new_arr[j]=t;}return new_arr;}// 找到当前的歌曲索引\nexport var findIndex=function findIndex(song,list){return list.findIndex(function(item){return song.id===item.id;});};","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/api/utils.js"],"names":["getCount","count","Math","floor","debounce","func","delay","timer","args","clearTimeout","setTimeout","apply","filterIndex","rankList","i","length","tracks","getName","list","str","map","item","index","name","isEmptyObject","obj","Object","keys","formatPlayTime","interval","minute","second","toString","padStart","elementStyle","document","createElement","style","vendor","transformNames","webkit","Moz","O","ms","standard","key","undefined","prefixStyle","charAt","toUpperCase","substr","getSongUrl","id","getRandomInt","min","max","random","shuffle","arr","new_arr","forEach","push","j","t","findIndex","song"],"mappings":"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","sourcesContent":["export const getCount = (count) => {\r\n  if(count < 0) return;\r\n  if(count < 10000) {\r\n    return count;\r\n  } else if(Math.floor(count / 10000) < 10000) {\r\n    return Math.floor(count/10000) + \"万\";\r\n  } else  {\r\n    return Math.floor(count / 10000000)/ 10 + \"亿\";\r\n  }\r\n}\r\n\r\nexport const debounce = (func, delay) => {\r\n  let timer;\r\n  return function (...args) {\r\n    if(timer) {\r\n      clearTimeout(timer);\r\n    }\r\n    timer = setTimeout(() => {\r\n      func.apply(this, args);\r\n      clearTimeout(timer);\r\n    }, delay);\r\n  }\r\n}\r\n\r\n//处理数据，找出第一个没有歌名的排行榜的索引\r\nexport const filterIndex = rankList => {\r\n  for (let i = 0; i < rankList.length - 1; i++) {\r\n    if (rankList[i].tracks.length && !rankList[i + 1].tracks.length) {\r\n      return i + 1;\r\n    }\r\n  }\r\n};\r\n\r\n//处理歌手列表拼接歌手名字\r\nexport const getName = list => {\r\n  let str = \"\";\r\n  list.map((item, index) => {\r\n    str += index === 0 ? item.name : \"/\" + item.name;\r\n    return item;\r\n  });\r\n  return str;\r\n};\r\n\r\n//判断一个对象是否为空\r\nexport const isEmptyObject = obj => !obj || Object.keys(obj).length === 0;\r\n\r\n//转换歌曲播放时间\r\nexport const formatPlayTime = interval => {\r\n  interval = interval | 0;\r\n  const minute = (interval / 60) | 0;\r\n  const second = (interval % 60).toString().padStart(2, \"0\");\r\n  return `${minute}:${second}`;\r\n};\r\n\r\n// 给css3相关属性增加浏览器前缀，处理浏览器兼容性问题\r\nlet elementStyle = document.createElement(\"div\").style;\r\n\r\nlet vendor = (() => {\r\n  //首先通过transition属性判断是何种浏览器\r\n  let transformNames = {\r\n    webkit: \"webkitTransform\",\r\n    Moz: \"MozTransform\",\r\n    O: \"OTransfrom\",\r\n    ms: \"msTransform\",\r\n    standard: \"Transform\"\r\n  };\r\n  for (let key in transformNames) {\r\n    if (elementStyle[transformNames[key]] !== undefined) {\r\n      return key;\r\n    }\r\n  }\r\n  return false;\r\n})();\r\n\r\nexport function prefixStyle(style) {\r\n  if (vendor === false) {\r\n    return false;\r\n  }\r\n  if (vendor === \"standard\") {\r\n    return style;\r\n  }\r\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1);\r\n}\r\n\r\n//拼接出歌曲的url链接\r\nexport const getSongUrl = id => {\r\n  return `https://music.163.com/song/media/outer/url?id=${id}.mp3`;\r\n};\r\n\r\nfunction getRandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n// 随机算法\r\nexport function shuffle(arr) {\r\n  let new_arr = [];\r\n  arr.forEach(item => {\r\n    new_arr.push(item);\r\n  });\r\n  for (let i = 0; i < new_arr.length; i++) {\r\n    let j = getRandomInt(0, i);\r\n    let t = new_arr[i];\r\n    new_arr[i] = new_arr[j];\r\n    new_arr[j] = t;\r\n  }\r\n  return new_arr;\r\n}\r\n\r\n// 找到当前的歌曲索引\r\nexport const findIndex = (song, list) => {\r\n  return list.findIndex(item => {\r\n    return song.id === item.id;\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}