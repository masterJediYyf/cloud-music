{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\86136\\\\Desktop\\\\\\u5B66\\u4E60\\u8FDB\\u5EA6\\\\new_html\\\\fullstack_yyf\\\\react\\\\cloud-music\\\\src\\\\application\\\\Player\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport MiniPlayer from './miniPlayer';\nimport NormalPlayer from './normalPlayer';\nimport { getSongUrl, isEmptyObject } from '../../api/utils';\nimport { changePlayingState, changeShowPlayList, changeCurrentIndex, changeCurrentSong, changePlayList, changePlayMode, changeFullScreen } from './store/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Player(props) {\n  _s();\n\n  // 目前播放时间\n  const [currentTime, setCurrentTime] = useState(0); // 歌曲总时长\n\n  const [duration, setDuration] = useState(0); //记录当前的歌曲 以便于下次重渲染时比对是否是一首歌\n\n  const [preSong, setPreSong] = useState({}); // mock 一份currentIndex\n\n  useEffect(() => {\n    changeCurrentIndexDispatch(0);\n  }, []);\n  useEffect(() => {\n    if (!playList.length || currentIndex === -1 || !playList[currentIndex] || playList[currentIndex].id === preSong.id) return;\n    let current = playList[currentIndex];\n    changeCurrentDispatch(current); //赋值currentSong\n\n    setPreSong(current);\n    audioRef.current.src = getSongUrl(current.id);\n    setTimeout(() => {\n      audioRef.current.play();\n    });\n    togglePlayingDispatch(true); //播放状态\n\n    setCurrentTime(0); //从头开始播放\n\n    setDuration(current.dt / 1000 | 0); //时长\n  }, [playList, currentIndex]); //歌曲播放进度\n\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration; //从props中取redux数据和dispatch方法\n\n  const {\n    playing,\n    currentSong: immutableCurrentSong,\n    currentIndex,\n    playList: immutablePlayList,\n    mode,\n    //播放模式\n    sequencePlayList: immutableSequencePlayList,\n    //顺序列表\n    fullScreen\n  } = props;\n  const {\n    togglePlayingDispatch,\n    changeCurrentIndexDispatch,\n    changeCurrentDispatch,\n    changePlayListDispatch,\n    //改变playList\n    changeModeDispatch,\n    //改变mode\n    toggleFullScreenDispatch\n  } = props;\n  currentIndex = 0;\n  const playList = immutablePlayList.toJS();\n  const sequencePlayList = immutableSequencePlayList.toJS();\n  const currentSong = immutableCurrentSong.toJS();\n  const audioRef = useRef();\n\n  const clickPlaying = (e, state) => {\n    e.stopPropagation();\n    togglePlayingDispatch(state);\n  };\n\n  useEffect(() => {\n    if (!currentSong) return;\n    changeCurrentIndexDispatch(0); //currentIndex 默认未 -1,临时改成0\n\n    let current = playList[0];\n    changeCurrentDispatch(current); //赋值 currentSong\n\n    audioRef.current.src = getSongUrl(current.id);\n    setTimeout(() => {\n      audioRef.current.play();\n    });\n    togglePlayingDispatch(true); //播放状态\n\n    setCurrentTime(0); //从头开始播放\n\n    setDuration(current.dt / 1000 | 0); //时长\n  }, []);\n  useEffect(() => {\n    playing ? audioRef.current.play() : audioRef.current.pause();\n  }, [playing]);\n\n  const updateTime = e => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const onProgressChange = curPercent => {\n    const newTime = curPercent * duration;\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n\n    if (!playing) {\n      togglePlayingDispatch(true);\n    }\n  }; // 一首歌循环\n\n\n  const handleLoop = () => {\n    audioRef.current.currentTime = 0;\n    changePlayingState(true);\n    audioRef.current.play();\n  }; // 播放上一首\n\n\n  const handlePrev = () => {\n    //播放列表只有一首歌的时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex - 1;\n    if (index < 0) index = playList.length - 1; // 队尾变队头\n\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  }; // 播放下一首\n\n\n  const handleNext = () => {\n    // 播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex + 1;\n    if (index === playList.length) index = 0;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(MiniPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      percent: percent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }, this), isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(NormalPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      duration: duration //总时长\n      ,\n      currentTime: currentTime //播放时长\n      ,\n      percent: percent //进度\n      ,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      onProgressChange: onProgressChange,\n      handlePrev: handlePrev,\n      handleNext: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      onTimeUpdate: updateTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n} //映射 Redux 全局的 state 到组件的 props 上\n\n\n_s(Player, \"MjrO/tU4OQagCSiyx8qmg4XaI5c=\");\n\n_c = Player;\n\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\n  playing: state.getIn([\"player\", \"playing\"]),\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\n  mode: state.getIn([\"player\", \"mode\"]),\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\n  playList: state.getIn([\"player\", \"playList\"]),\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\n}); //映射 dispatch 到 props 上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    togglePlayingDispatch(data) {\n      dispatch(changePlayingState(data));\n    },\n\n    toggleFullScreenDispatch(data) {\n      dispatch(changeFullScreen(data));\n    },\n\n    togglePlayListDispatch(data) {\n      dispatch(changeShowPlayList(data));\n    },\n\n    changeCurrentIndexDispatch(index) {\n      dispatch(changeCurrentIndex(index));\n    },\n\n    changeCurrentDispatch(data) {\n      dispatch(changeCurrentSong(data));\n    },\n\n    changeModeDispatch(data) {\n      dispatch(changePlayMode(data));\n    },\n\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    }\n\n  };\n}; // 将ui 组件 包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Player));\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/application/Player/index.js"],"names":["React","useRef","useState","useEffect","connect","MiniPlayer","NormalPlayer","getSongUrl","isEmptyObject","changePlayingState","changeShowPlayList","changeCurrentIndex","changeCurrentSong","changePlayList","changePlayMode","changeFullScreen","Player","props","currentTime","setCurrentTime","duration","setDuration","preSong","setPreSong","changeCurrentIndexDispatch","playList","length","currentIndex","id","current","changeCurrentDispatch","audioRef","src","setTimeout","play","togglePlayingDispatch","dt","percent","isNaN","playing","currentSong","immutableCurrentSong","immutablePlayList","mode","sequencePlayList","immutableSequencePlayList","fullScreen","changePlayListDispatch","changeModeDispatch","toggleFullScreenDispatch","toJS","clickPlaying","e","state","stopPropagation","pause","updateTime","target","onProgressChange","curPercent","newTime","handleLoop","handlePrev","index","handleNext","mapStateToProps","getIn","showPlayList","mapDispatchToProps","dispatch","data","togglePlayListDispatch","memo"],"mappings":"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","sourcesContent":["import React,{useRef,useState,useEffect} from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport MiniPlayer from './miniPlayer';\r\nimport NormalPlayer from './normalPlayer';\r\nimport { getSongUrl,isEmptyObject} from '../../api/utils';\r\n\r\nimport {\r\n    changePlayingState,\r\n    changeShowPlayList,\r\n    changeCurrentIndex,\r\n    changeCurrentSong,\r\n    changePlayList,\r\n    changePlayMode,\r\n    changeFullScreen\r\n} from './store/actionCreators';\r\n\r\nfunction Player(props){\r\n\r\n    // 目前播放时间\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n\r\n    // 歌曲总时长\r\n    const [duration, setDuration] = useState(0);\r\n\r\n    //记录当前的歌曲 以便于下次重渲染时比对是否是一首歌\r\n    const [preSong, setPreSong] = useState({});\r\n\r\n    // mock 一份currentIndex\r\n    useEffect(() => {\r\n      changeCurrentIndexDispatch(0);\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n      if (\r\n        !playList.length ||\r\n        currentIndex === -1 ||\r\n        !playList[currentIndex] ||\r\n        playList[currentIndex].id === preSong.id \r\n      )\r\n        return;\r\n      let current = playList[currentIndex];\r\n      changeCurrentDispatch(current);//赋值currentSong\r\n      setPreSong(current);\r\n      audioRef.current.src = getSongUrl(current.id);\r\n      setTimeout(() => {\r\n        audioRef.current.play();\r\n      });\r\n      togglePlayingDispatch(true);//播放状态\r\n      setCurrentTime(0);//从头开始播放\r\n      setDuration((current.dt / 1000) | 0);//时长\r\n    }, [playList, currentIndex]);\r\n    \r\n    //歌曲播放进度\r\n    let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\r\n\r\n    //从props中取redux数据和dispatch方法\r\n    const {\r\n      playing,\r\n      currentSong:immutableCurrentSong,\r\n      currentIndex,\r\n      playList:immutablePlayList,\r\n      mode,//播放模式\r\n      sequencePlayList:immutableSequencePlayList,//顺序列表\r\n      fullScreen\r\n    } = props;\r\n\r\n    const {\r\n      togglePlayingDispatch,\r\n      changeCurrentIndexDispatch,\r\n      changeCurrentDispatch,\r\n      changePlayListDispatch,//改变playList\r\n      changeModeDispatch,//改变mode\r\n      toggleFullScreenDispatch\r\n    } = props;\r\n    currentIndex = 0;\r\n    const playList = immutablePlayList.toJS();\r\n    const sequencePlayList = immutableSequencePlayList.toJS();\r\n    const currentSong = immutableCurrentSong.toJS();\r\n\r\n    const audioRef = useRef();\r\n\r\n    const clickPlaying = (e, state) => {\r\n      e.stopPropagation();\r\n      togglePlayingDispatch(state);\r\n    };\r\n\r\n    useEffect(() => {\r\n      if(!currentSong) return;\r\n      changeCurrentIndexDispatch(0);//currentIndex 默认未 -1,临时改成0\r\n      let current = playList[0];\r\n      changeCurrentDispatch(current);//赋值 currentSong\r\n      audioRef.current.src = getSongUrl(current.id);\r\n      setTimeout(() => {\r\n        audioRef.current.play();\r\n      });\r\n      togglePlayingDispatch(true); //播放状态\r\n      setCurrentTime(0); //从头开始播放\r\n      setDuration((current.dt / 1000) | 0); //时长\r\n    },[])\r\n\r\n    useEffect(() => {\r\n      playing ? audioRef.current.play() : audioRef.current.pause();\r\n    }, [playing]);\r\n\r\n    const updateTime = e => {\r\n      setCurrentTime(e.target.currentTime);\r\n    }\r\n\r\n    const onProgressChange = curPercent => {\r\n      const newTime = curPercent * duration;\r\n      setCurrentTime(newTime);\r\n      audioRef.current.currentTime = newTime;\r\n      if (!playing) {\r\n        togglePlayingDispatch(true);\r\n      }\r\n    };\r\n  \r\n    // 一首歌循环\r\n    const handleLoop = () => {\r\n      audioRef.current.currentTime = 0;\r\n      changePlayingState(true);\r\n      audioRef.current.play();\r\n    }\r\n\r\n    // 播放上一首\r\n    const handlePrev = () => {\r\n      //播放列表只有一首歌的时单曲循环\r\n      if(playList.length === 1){\r\n        handleLoop();\r\n        return;\r\n      }\r\n      let index = currentIndex - 1;\r\n      if(index < 0) index = playList.length - 1;// 队尾变队头\r\n      if(!playing) togglePlayingDispatch(true);\r\n      changeCurrentIndexDispatch(index);\r\n    }\r\n\r\n    // 播放下一首\r\n    const handleNext = () => {\r\n      // 播放列表只有一首歌时单曲循环\r\n      if(playList.length === 1){\r\n        handleLoop();\r\n        return;\r\n      }\r\n      let index= currentIndex + 1;\r\n      if(index === playList.length) index = 0;\r\n      if(!playing) togglePlayingDispatch(true);\r\n      changeCurrentIndexDispatch(index);\r\n    }\r\n    return (\r\n        <div>\r\n        { isEmptyObject(currentSong) ? null : \r\n          <MiniPlayer\r\n            song={currentSong}\r\n            fullScreen={fullScreen}\r\n            playing={playing}\r\n            toggleFullScreen={toggleFullScreenDispatch}\r\n            clickPlaying={clickPlaying}\r\n            percent={percent}\r\n          /> \r\n        }\r\n        { isEmptyObject(currentSong) ? null : \r\n          <NormalPlayer\r\n            song={currentSong}\r\n            fullScreen={fullScreen}\r\n            playing={playing}\r\n            duration={duration} //总时长\r\n            currentTime={currentTime}//播放时长\r\n            percent={percent}//进度\r\n            toggleFullScreen={toggleFullScreenDispatch}\r\n            clickPlaying={clickPlaying}\r\n            onProgressChange={onProgressChange}\r\n            handlePrev={handlePrev}\r\n            handleNext={handleNext}\r\n          />\r\n        }\r\n        <audio \r\n          ref={audioRef}\r\n          onTimeUpdate={updateTime}\r\n        ></audio>\r\n      </div>\r\n    )\r\n}\r\n\r\n//映射 Redux 全局的 state 到组件的 props 上\r\nconst mapStateToProps = state => ({\r\n    fullScreen: state.getIn ([\"player\", \"fullScreen\"]),\r\n    playing: state.getIn ([\"player\", \"playing\"]),\r\n    currentSong: state.getIn ([\"player\", \"currentSong\"]),\r\n    showPlayList: state.getIn ([\"player\", \"showPlayList\"]),\r\n    mode: state.getIn ([\"player\", \"mode\"]),\r\n    currentIndex: state.getIn ([\"player\", \"currentIndex\"]),\r\n    playList: state.getIn ([\"player\", \"playList\"]),\r\n    sequencePlayList: state.getIn ([\"player\", \"sequencePlayList\"])\r\n})\r\n\r\n//映射 dispatch 到 props 上\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n      togglePlayingDispatch (data) {\r\n        dispatch (changePlayingState (data));\r\n      },\r\n      toggleFullScreenDispatch (data) {\r\n        dispatch (changeFullScreen (data));\r\n      },\r\n      togglePlayListDispatch (data) {\r\n        dispatch (changeShowPlayList (data));\r\n      },\r\n      changeCurrentIndexDispatch (index) {\r\n        dispatch (changeCurrentIndex (index));\r\n      },\r\n      changeCurrentDispatch (data) {\r\n        dispatch (changeCurrentSong (data));\r\n      },\r\n      changeModeDispatch (data) {\r\n        dispatch (changePlayMode (data));\r\n      },\r\n      changePlayListDispatch (data) {\r\n        dispatch (changePlayList (data));\r\n      }\r\n    };\r\n};\r\n\r\n// 将ui 组件 包装成容器组件\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(React.memo(Player));"]},"metadata":{},"sourceType":"module"}