{"ast":null,"code":"import _slicedToArray from\"C:/Users/86136/Desktop/\\u5B66\\u4E60\\u8FDB\\u5EA6/new_html/fullstack_yyf/react/cloud-music/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useState,useEffect}from\"react\";import{connect}from\"react-redux\";import{changePlayingState,changeShowPlayList,changeCurrentIndex,changeCurrentSong,changePlayList,changePlayMode,changeFullScreen}from\"./store/actionCreators\";import MiniPlayer from'./miniPlayer';import NormalPlayer from'./normalPlayer';import{getSongUrl,isEmptyObject,shuffle,findIndex}from\"../../api/utils\";import{playMode}from'../../api/config';import Toast from\"./../../baseUI/Toast/index\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Player(props){//目前播放时间\nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),currentTime=_useState2[0],setCurrentTime=_useState2[1];//歌曲总时长\nvar _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),duration=_useState4[0],setDuration=_useState4[1];//歌曲播放进度\nvar percent=isNaN(currentTime/duration)?0:currentTime/duration;var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),preSong=_useState6[0],setPreSong=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),modeText=_useState8[0],setModeText=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),songReady=_useState10[0],setSongReady=_useState10[1];var audioRef=useRef();var toastRef=useRef();var playing=props.playing,immutableCurrentSong=props.currentSong,currentIndex=props.currentIndex,immutablePlayList=props.playList,mode=props.mode,immutableSequencePlayList=props.sequencePlayList,fullScreen=props.fullScreen;var togglePlayingDispatch=props.togglePlayingDispatch,changeCurrentIndexDispatch=props.changeCurrentIndexDispatch,changeCurrentDispatch=props.changeCurrentDispatch,changePlayListDispatch=props.changePlayListDispatch,changeModeDispatch=props.changeModeDispatch,toggleFullScreenDispatch=props.toggleFullScreenDispatch;var playList=immutablePlayList.toJS();var sequencePlayList=immutableSequencePlayList.toJS();var currentSong=immutableCurrentSong.toJS();useEffect(function(){if(!playList.length||currentIndex===-1||!playList[currentIndex]||playList[currentIndex].id===preSong.id||!songReady)return;var current=playList[currentIndex];setPreSong(current);setSongReady(false);changeCurrentDispatch(current);//赋值currentSong\naudioRef.current.src=getSongUrl(current.id);setTimeout(function(){audioRef.current.play().then(function(){setSongReady(true);});});togglePlayingDispatch(true);//播放状态\nsetCurrentTime(0);//从头开始播放\nsetDuration(current.dt/1000|0);//时长\n},[playList,currentIndex]);useEffect(function(){playing?audioRef.current.play():audioRef.current.pause();},[playing]);var clickPlaying=function clickPlaying(e,state){e.stopPropagation();togglePlayingDispatch(state);};var updateTime=function updateTime(e){setCurrentTime(e.target.currentTime);};var onProgressChange=function onProgressChange(curPercent){var newTime=curPercent*duration;setCurrentTime(newTime);audioRef.current.currentTime=newTime;if(!playing){togglePlayingDispatch(true);}};//一首歌循环\nvar handleLoop=function handleLoop(){audioRef.current.currentTime=0;changePlayingState(true);audioRef.current.play();};var handlePrev=function handlePrev(){//播放列表只有一首歌时单曲循环\nif(playList.length===1){handleLoop();return;}var index=currentIndex-1;if(index<0)index=playList.length-1;if(!playing)togglePlayingDispatch(true);changeCurrentIndexDispatch(index);};var changeMode=function changeMode(){var newMode=(mode+1)%3;if(newMode===0){//顺序模式\nchangePlayListDispatch(sequencePlayList);var index=findIndex(currentSong,sequencePlayList);changeCurrentIndexDispatch(index);setModeText(\"顺序循环\");}else if(newMode===1){//单曲循环\nchangePlayListDispatch(sequencePlayList);setModeText(\"单曲循环\");}else if(newMode===2){//随机播放\nvar newList=shuffle(sequencePlayList);var _index=findIndex(currentSong,newList);changePlayListDispatch(newList);changeCurrentIndexDispatch(_index);setModeText(\"随机播放\");}changeModeDispatch(newMode);toastRef.current.show();};var handleNext=function handleNext(){//播放列表只有一首歌时单曲循环\nif(playList.length===1){handleLoop();return;}var index=currentIndex+1;if(index===playList.length)index=0;if(!playing)togglePlayingDispatch(true);changeCurrentIndexDispatch(index);};var handleEnd=function handleEnd(){if(mode===playMode.loop){handleLoop();}else{handleNext();}};return/*#__PURE__*/_jsxs(\"div\",{children:[isEmptyObject(currentSong)?null:/*#__PURE__*/_jsx(MiniPlayer,{song:currentSong,fullScreen:fullScreen,playing:playing,toggleFullScreen:toggleFullScreenDispatch,clickPlaying:clickPlaying,percent:percent}),isEmptyObject(currentSong)?null:/*#__PURE__*/_jsx(NormalPlayer,{song:currentSong,fullScreen:fullScreen,playing:playing,mode:mode,changeMode:changeMode,duration:duration,currentTime:currentTime,percent:percent,toggleFullScreen:toggleFullScreenDispatch,clickPlaying:clickPlaying,onProgressChange:onProgressChange,handlePrev:handlePrev,handleNext:handleNext}),/*#__PURE__*/_jsx(\"audio\",{ref:audioRef,onTimeUpdate:updateTime,onEnded:handleEnd}),/*#__PURE__*/_jsx(Toast,{text:modeText,ref:toastRef})]});}// 映射Redux全局的state到组件的props上\nvar mapStateToProps=function mapStateToProps(state){return{fullScreen:state.getIn([\"player\",\"fullScreen\"]),playing:state.getIn([\"player\",\"playing\"]),currentSong:state.getIn([\"player\",\"currentSong\"]),showPlayList:state.getIn([\"player\",\"showPlayList\"]),mode:state.getIn([\"player\",\"mode\"]),currentIndex:state.getIn([\"player\",\"currentIndex\"]),playList:state.getIn([\"player\",\"playList\"]),sequencePlayList:state.getIn([\"player\",\"sequencePlayList\"])};};// 映射dispatch到props上\nvar mapDispatchToProps=function mapDispatchToProps(dispatch){return{togglePlayingDispatch:function togglePlayingDispatch(data){dispatch(changePlayingState(data));},toggleFullScreenDispatch:function toggleFullScreenDispatch(data){dispatch(changeFullScreen(data));},togglePlayListDispatch:function togglePlayListDispatch(data){dispatch(changeShowPlayList(data));},changeCurrentIndexDispatch:function changeCurrentIndexDispatch(index){dispatch(changeCurrentIndex(index));},changeCurrentDispatch:function changeCurrentDispatch(data){dispatch(changeCurrentSong(data));},changeModeDispatch:function changeModeDispatch(data){dispatch(changePlayMode(data));},changePlayListDispatch:function changePlayListDispatch(data){dispatch(changePlayList(data));}};};// 将ui组件包装成容器组件\nexport default connect(mapStateToProps,mapDispatchToProps)(/*#__PURE__*/React.memo(Player));","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/application/Player/index.js"],"names":["React","useRef","useState","useEffect","connect","changePlayingState","changeShowPlayList","changeCurrentIndex","changeCurrentSong","changePlayList","changePlayMode","changeFullScreen","MiniPlayer","NormalPlayer","getSongUrl","isEmptyObject","shuffle","findIndex","playMode","Toast","Player","props","currentTime","setCurrentTime","duration","setDuration","percent","isNaN","preSong","setPreSong","modeText","setModeText","songReady","setSongReady","audioRef","toastRef","playing","immutableCurrentSong","currentSong","currentIndex","immutablePlayList","playList","mode","immutableSequencePlayList","sequencePlayList","fullScreen","togglePlayingDispatch","changeCurrentIndexDispatch","changeCurrentDispatch","changePlayListDispatch","changeModeDispatch","toggleFullScreenDispatch","toJS","length","id","current","src","setTimeout","play","then","dt","pause","clickPlaying","e","state","stopPropagation","updateTime","target","onProgressChange","curPercent","newTime","handleLoop","handlePrev","index","changeMode","newMode","newList","show","handleNext","handleEnd","loop","mapStateToProps","getIn","showPlayList","mapDispatchToProps","dispatch","data","togglePlayListDispatch","memo"],"mappings":"+MAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,QAAxB,CAAkCC,SAAlC,KAAmD,OAAnD,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OACEC,kBADF,CAEEC,kBAFF,CAGEC,kBAHF,CAIEC,iBAJF,CAKEC,cALF,CAMEC,cANF,CAOEC,gBAPF,KAQO,wBARP,CASA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAASC,UAAT,CAAqBC,aAArB,CAAoCC,OAApC,CAA6CC,SAA7C,KAA8D,iBAA9D,CACA,OAASC,QAAT,KAAyB,kBAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,4BAAlB,C,wFAEA,QAASC,CAAAA,MAAT,CAAgBC,KAAhB,CAAuB,CACrB;AADqB,cAEiBnB,QAAQ,CAAC,CAAD,CAFzB,wCAEdoB,WAFc,eAEDC,cAFC,eAGrB;AAHqB,eAIWrB,QAAQ,CAAC,CAAD,CAJnB,yCAIdsB,QAJc,eAIJC,WAJI,eAKrB;AACA,GAAIC,CAAAA,OAAO,CAAGC,KAAK,CAACL,WAAW,CAAGE,QAAf,CAAL,CAAgC,CAAhC,CAAoCF,WAAW,CAAGE,QAAhE,CANqB,eAQStB,QAAQ,CAAC,EAAD,CARjB,yCAQd0B,OARc,eAQLC,UARK,8BASW3B,QAAQ,CAAC,EAAD,CATnB,yCASd4B,QATc,eASJC,WATI,8BAUa7B,QAAQ,CAAC,IAAD,CAVrB,0CAUd8B,SAVc,gBAUHC,YAVG,gBAYrB,GAAMC,CAAAA,QAAQ,CAAGjC,MAAM,EAAvB,CACA,GAAMkC,CAAAA,QAAQ,CAAGlC,MAAM,EAAvB,CAbqB,GAgBnBmC,CAAAA,OAhBmB,CAuBjBf,KAvBiB,CAgBnBe,OAhBmB,CAiBPC,oBAjBO,CAuBjBhB,KAvBiB,CAiBnBiB,WAjBmB,CAkBnBC,YAlBmB,CAuBjBlB,KAvBiB,CAkBnBkB,YAlBmB,CAmBVC,iBAnBU,CAuBjBnB,KAvBiB,CAmBnBoB,QAnBmB,CAoBnBC,IApBmB,CAuBjBrB,KAvBiB,CAoBnBqB,IApBmB,CAqBFC,yBArBE,CAuBjBtB,KAvBiB,CAqBnBuB,gBArBmB,CAsBnBC,UAtBmB,CAuBjBxB,KAvBiB,CAsBnBwB,UAtBmB,IA0BnBC,CAAAA,qBA1BmB,CAgCjBzB,KAhCiB,CA0BnByB,qBA1BmB,CA2BnBC,0BA3BmB,CAgCjB1B,KAhCiB,CA2BnB0B,0BA3BmB,CA4BnBC,qBA5BmB,CAgCjB3B,KAhCiB,CA4BnB2B,qBA5BmB,CA6BnBC,sBA7BmB,CAgCjB5B,KAhCiB,CA6BnB4B,sBA7BmB,CA8BnBC,kBA9BmB,CAgCjB7B,KAhCiB,CA8BnB6B,kBA9BmB,CA+BnBC,wBA/BmB,CAgCjB9B,KAhCiB,CA+BnB8B,wBA/BmB,CAkCrB,GAAMV,CAAAA,QAAQ,CAAGD,iBAAiB,CAACY,IAAlB,EAAjB,CACA,GAAMR,CAAAA,gBAAgB,CAAGD,yBAAyB,CAACS,IAA1B,EAAzB,CACA,GAAMd,CAAAA,WAAW,CAAGD,oBAAoB,CAACe,IAArB,EAApB,CAGAjD,SAAS,CAAC,UAAM,CACd,GACE,CAACsC,QAAQ,CAACY,MAAV,EACAd,YAAY,GAAK,CAAC,CADlB,EAEA,CAACE,QAAQ,CAACF,YAAD,CAFT,EAGAE,QAAQ,CAACF,YAAD,CAAR,CAAuBe,EAAvB,GAA8B1B,OAAO,CAAC0B,EAHtC,EAIA,CAACtB,SALH,CAOE,OACF,GAAIuB,CAAAA,OAAO,CAAGd,QAAQ,CAACF,YAAD,CAAtB,CACAV,UAAU,CAAC0B,OAAD,CAAV,CACAtB,YAAY,CAAC,KAAD,CAAZ,CACAe,qBAAqB,CAACO,OAAD,CAArB,CAA+B;AAC/BrB,QAAQ,CAACqB,OAAT,CAAiBC,GAAjB,CAAuB1C,UAAU,CAACyC,OAAO,CAACD,EAAT,CAAjC,CACAG,UAAU,CAAC,UAAM,CACfvB,QAAQ,CAACqB,OAAT,CAAiBG,IAAjB,GAAwBC,IAAxB,CAA6B,UAAM,CACjC1B,YAAY,CAAC,IAAD,CAAZ,CACD,CAFD,EAGD,CAJS,CAAV,CAKAa,qBAAqB,CAAC,IAAD,CAArB,CAA4B;AAC5BvB,cAAc,CAAC,CAAD,CAAd,CAAkB;AAClBE,WAAW,CAAE8B,OAAO,CAACK,EAAR,CAAa,IAAd,CAAsB,CAAvB,CAAX,CAAqC;AACtC,CAtBQ,CAsBN,CAACnB,QAAD,CAAWF,YAAX,CAtBM,CAAT,CAwBApC,SAAS,CAAC,UAAM,CACdiC,OAAO,CAAGF,QAAQ,CAACqB,OAAT,CAAiBG,IAAjB,EAAH,CAA6BxB,QAAQ,CAACqB,OAAT,CAAiBM,KAAjB,EAApC,CACD,CAFQ,CAEN,CAACzB,OAAD,CAFM,CAAT,CAIA,GAAM0B,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAIC,KAAJ,CAAc,CACjCD,CAAC,CAACE,eAAF,GACAnB,qBAAqB,CAACkB,KAAD,CAArB,CACD,CAHD,CAKA,GAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAH,CAAC,CAAI,CACtBxC,cAAc,CAACwC,CAAC,CAACI,MAAF,CAAS7C,WAAV,CAAd,CACD,CAFD,CAIA,GAAM8C,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAC,UAAU,CAAI,CACrC,GAAMC,CAAAA,OAAO,CAAGD,UAAU,CAAG7C,QAA7B,CACAD,cAAc,CAAC+C,OAAD,CAAd,CACApC,QAAQ,CAACqB,OAAT,CAAiBjC,WAAjB,CAA+BgD,OAA/B,CACA,GAAI,CAAClC,OAAL,CAAc,CACZU,qBAAqB,CAAC,IAAD,CAArB,CACD,CACF,CAPD,CAQA;AACA,GAAMyB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBrC,QAAQ,CAACqB,OAAT,CAAiBjC,WAAjB,CAA+B,CAA/B,CACAjB,kBAAkB,CAAC,IAAD,CAAlB,CACA6B,QAAQ,CAACqB,OAAT,CAAiBG,IAAjB,GACD,CAJD,CAMA,GAAMc,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB;AACA,GAAI/B,QAAQ,CAACY,MAAT,GAAoB,CAAxB,CAA2B,CACzBkB,UAAU,GACV,OACD,CACD,GAAIE,CAAAA,KAAK,CAAGlC,YAAY,CAAG,CAA3B,CACA,GAAIkC,KAAK,CAAG,CAAZ,CAAeA,KAAK,CAAGhC,QAAQ,CAACY,MAAT,CAAkB,CAA1B,CACf,GAAI,CAACjB,OAAL,CAAcU,qBAAqB,CAAC,IAAD,CAArB,CACdC,0BAA0B,CAAC0B,KAAD,CAA1B,CACD,CAVD,CAYA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,GAAIC,CAAAA,OAAO,CAAG,CAACjC,IAAI,CAAG,CAAR,EAAa,CAA3B,CACA,GAAIiC,OAAO,GAAK,CAAhB,CAAmB,CACjB;AACA1B,sBAAsB,CAACL,gBAAD,CAAtB,CACA,GAAI6B,CAAAA,KAAK,CAAGxD,SAAS,CAACqB,WAAD,CAAcM,gBAAd,CAArB,CACAG,0BAA0B,CAAC0B,KAAD,CAA1B,CACA1C,WAAW,CAAC,MAAD,CAAX,CACD,CAND,IAMO,IAAI4C,OAAO,GAAK,CAAhB,CAAmB,CACxB;AACA1B,sBAAsB,CAACL,gBAAD,CAAtB,CACAb,WAAW,CAAC,MAAD,CAAX,CACD,CAJM,IAIA,IAAI4C,OAAO,GAAK,CAAhB,CAAmB,CACxB;AACA,GAAIC,CAAAA,OAAO,CAAG5D,OAAO,CAAC4B,gBAAD,CAArB,CACA,GAAI6B,CAAAA,MAAK,CAAGxD,SAAS,CAACqB,WAAD,CAAcsC,OAAd,CAArB,CACA3B,sBAAsB,CAAC2B,OAAD,CAAtB,CACA7B,0BAA0B,CAAC0B,MAAD,CAA1B,CACA1C,WAAW,CAAC,MAAD,CAAX,CACD,CACDmB,kBAAkB,CAACyB,OAAD,CAAlB,CACAxC,QAAQ,CAACoB,OAAT,CAAiBsB,IAAjB,GACD,CAtBD,CAwBA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB;AACA,GAAIrC,QAAQ,CAACY,MAAT,GAAoB,CAAxB,CAA2B,CACzBkB,UAAU,GACV,OACD,CACD,GAAIE,CAAAA,KAAK,CAAGlC,YAAY,CAAG,CAA3B,CACA,GAAIkC,KAAK,GAAKhC,QAAQ,CAACY,MAAvB,CAA+BoB,KAAK,CAAG,CAAR,CAC/B,GAAI,CAACrC,OAAL,CAAcU,qBAAqB,CAAC,IAAD,CAArB,CACdC,0BAA0B,CAAC0B,KAAD,CAA1B,CACD,CAVD,CAYA,GAAMM,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAIrC,IAAI,GAAKxB,QAAQ,CAAC8D,IAAtB,CAA4B,CAC1BT,UAAU,GACX,CAFD,IAEO,CACLO,UAAU,GACX,CACF,CAND,CAOA,mBACE,uBACI/D,aAAa,CAACuB,WAAD,CAAb,CAA6B,IAA7B,cACA,KAAC,UAAD,EACE,IAAI,CAAEA,WADR,CAEE,UAAU,CAAEO,UAFd,CAGE,OAAO,CAAET,OAHX,CAIE,gBAAgB,CAAEe,wBAJpB,CAKE,YAAY,CAAEW,YALhB,CAME,OAAO,CAAEpC,OANX,EAFJ,CAYIX,aAAa,CAACuB,WAAD,CAAb,CAA6B,IAA7B,cACA,KAAC,YAAD,EACE,IAAI,CAAEA,WADR,CAEE,UAAU,CAAEO,UAFd,CAGE,OAAO,CAAET,OAHX,CAIE,IAAI,CAAEM,IAJR,CAKE,UAAU,CAAEgC,UALd,CAME,QAAQ,CAAElD,QANZ,CAOE,WAAW,CAAEF,WAPf,CAQE,OAAO,CAAEI,OARX,CASE,gBAAgB,CAAEyB,wBATpB,CAUE,YAAY,CAAEW,YAVhB,CAWE,gBAAgB,CAAEM,gBAXpB,CAYE,UAAU,CAAEI,UAZd,CAaE,UAAU,CAAEM,UAbd,EAbJ,cA8BE,cACE,GAAG,CAAE5C,QADP,CAEE,YAAY,CAAEgC,UAFhB,CAGE,OAAO,CAAEa,SAHX,EA9BF,cAmCE,KAAC,KAAD,EAAO,IAAI,CAAEjD,QAAb,CAAuB,GAAG,CAAEK,QAA5B,EAnCF,GADF,CAuCD,CAED;AACA,GAAM8C,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAjB,KAAK,QAAK,CAChCnB,UAAU,CAAEmB,KAAK,CAACkB,KAAN,CAAY,CAAC,QAAD,CAAW,YAAX,CAAZ,CADoB,CAEhC9C,OAAO,CAAE4B,KAAK,CAACkB,KAAN,CAAY,CAAC,QAAD,CAAW,SAAX,CAAZ,CAFuB,CAGhC5C,WAAW,CAAE0B,KAAK,CAACkB,KAAN,CAAY,CAAC,QAAD,CAAW,aAAX,CAAZ,CAHmB,CAIhCC,YAAY,CAAEnB,KAAK,CAACkB,KAAN,CAAY,CAAC,QAAD,CAAW,cAAX,CAAZ,CAJkB,CAKhCxC,IAAI,CAAEsB,KAAK,CAACkB,KAAN,CAAY,CAAC,QAAD,CAAW,MAAX,CAAZ,CAL0B,CAMhC3C,YAAY,CAAEyB,KAAK,CAACkB,KAAN,CAAY,CAAC,QAAD,CAAW,cAAX,CAAZ,CANkB,CAOhCzC,QAAQ,CAAEuB,KAAK,CAACkB,KAAN,CAAY,CAAC,QAAD,CAAW,UAAX,CAAZ,CAPsB,CAQhCtC,gBAAgB,CAAEoB,KAAK,CAACkB,KAAN,CAAY,CAAC,QAAD,CAAW,kBAAX,CAAZ,CARc,CAAL,EAA7B,CAWA;AACA,GAAME,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,CAAI,CACrC,MAAO,CACLvC,qBADK,gCACiBwC,IADjB,CACuB,CAC1BD,QAAQ,CAAChF,kBAAkB,CAACiF,IAAD,CAAnB,CAAR,CACD,CAHI,CAILnC,wBAJK,mCAIoBmC,IAJpB,CAI0B,CAC7BD,QAAQ,CAAC1E,gBAAgB,CAAC2E,IAAD,CAAjB,CAAR,CACD,CANI,CAOLC,sBAPK,iCAOkBD,IAPlB,CAOwB,CAC3BD,QAAQ,CAAC/E,kBAAkB,CAACgF,IAAD,CAAnB,CAAR,CACD,CATI,CAULvC,0BAVK,qCAUsB0B,KAVtB,CAU6B,CAChCY,QAAQ,CAAC9E,kBAAkB,CAACkE,KAAD,CAAnB,CAAR,CACD,CAZI,CAaLzB,qBAbK,gCAaiBsC,IAbjB,CAauB,CAC1BD,QAAQ,CAAC7E,iBAAiB,CAAC8E,IAAD,CAAlB,CAAR,CACD,CAfI,CAgBLpC,kBAhBK,6BAgBcoC,IAhBd,CAgBoB,CACvBD,QAAQ,CAAC3E,cAAc,CAAC4E,IAAD,CAAf,CAAR,CACD,CAlBI,CAmBLrC,sBAnBK,iCAmBkBqC,IAnBlB,CAmBwB,CAC3BD,QAAQ,CAAC5E,cAAc,CAAC6E,IAAD,CAAf,CAAR,CACD,CArBI,CAAP,CAuBD,CAxBD,CA0BA;AACA,cAAelF,CAAAA,OAAO,CACpB6E,eADoB,CAEpBG,kBAFoB,CAAP,cAGbpF,KAAK,CAACwF,IAAN,CAAWpE,MAAX,CAHa,CAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  changePlayingState,\r\n  changeShowPlayList,\r\n  changeCurrentIndex,\r\n  changeCurrentSong,\r\n  changePlayList,\r\n  changePlayMode,\r\n  changeFullScreen\r\n} from \"./store/actionCreators\";\r\nimport MiniPlayer from './miniPlayer';\r\nimport NormalPlayer from './normalPlayer';\r\nimport { getSongUrl, isEmptyObject, shuffle, findIndex } from \"../../api/utils\";\r\nimport { playMode } from '../../api/config';\r\nimport Toast from \"./../../baseUI/Toast/index\";\r\n\r\nfunction Player(props) {\r\n  //目前播放时间\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  //歌曲总时长\r\n  const [duration, setDuration] = useState(0);\r\n  //歌曲播放进度\r\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\r\n\r\n  const [preSong, setPreSong] = useState({});\r\n  const [modeText, setModeText] = useState(\"\");\r\n  const [songReady, setSongReady] = useState(true);\r\n\r\n  const audioRef = useRef();\r\n  const toastRef = useRef();\r\n\r\n  const {\r\n    playing,\r\n    currentSong:immutableCurrentSong,\r\n    currentIndex,\r\n    playList:immutablePlayList,\r\n    mode,//播放模式\r\n    sequencePlayList:immutableSequencePlayList,//顺序列表\r\n    fullScreen\r\n  } = props;\r\n  \r\n  const {\r\n    togglePlayingDispatch,\r\n    changeCurrentIndexDispatch,\r\n    changeCurrentDispatch,\r\n    changePlayListDispatch,//改变playList\r\n    changeModeDispatch,//改变mode\r\n    toggleFullScreenDispatch\r\n  } = props;\r\n  \r\n  const playList = immutablePlayList.toJS();\r\n  const sequencePlayList = immutableSequencePlayList.toJS();\r\n  const currentSong = immutableCurrentSong.toJS();\r\n\r\n  \r\n  useEffect(() => {\r\n    if (\r\n      !playList.length ||\r\n      currentIndex === -1 ||\r\n      !playList[currentIndex] ||\r\n      playList[currentIndex].id === preSong.id ||\r\n      !songReady\r\n    )\r\n      return;\r\n    let current = playList[currentIndex];\r\n    setPreSong(current);\r\n    setSongReady(false);\r\n    changeCurrentDispatch(current);//赋值currentSong\r\n    audioRef.current.src = getSongUrl(current.id);\r\n    setTimeout(() => {\r\n      audioRef.current.play().then(() => {\r\n        setSongReady(true);\r\n      });\r\n    });\r\n    togglePlayingDispatch(true);//播放状态\r\n    setCurrentTime(0);//从头开始播放\r\n    setDuration((current.dt / 1000) | 0);//时长\r\n  }, [playList, currentIndex]);\r\n\r\n  useEffect(() => {\r\n    playing ? audioRef.current.play() : audioRef.current.pause();\r\n  }, [playing]);\r\n\r\n  const clickPlaying = (e, state) => {\r\n    e.stopPropagation();\r\n    togglePlayingDispatch(state);\r\n  };\r\n\r\n  const updateTime = e => {\r\n    setCurrentTime(e.target.currentTime);\r\n  };\r\n\r\n  const onProgressChange = curPercent => {\r\n    const newTime = curPercent * duration;\r\n    setCurrentTime(newTime);\r\n    audioRef.current.currentTime = newTime;\r\n    if (!playing) {\r\n      togglePlayingDispatch(true);\r\n    }\r\n  };\r\n  //一首歌循环\r\n  const handleLoop = () => {\r\n    audioRef.current.currentTime = 0;\r\n    changePlayingState(true);\r\n    audioRef.current.play();\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    //播放列表只有一首歌时单曲循环\r\n    if (playList.length === 1) {\r\n      handleLoop();\r\n      return;\r\n    }\r\n    let index = currentIndex - 1;\r\n    if (index < 0) index = playList.length - 1;\r\n    if (!playing) togglePlayingDispatch(true);\r\n    changeCurrentIndexDispatch(index);\r\n  };\r\n\r\n  const changeMode = () => {\r\n    let newMode = (mode + 1) % 3;\r\n    if (newMode === 0) {\r\n      //顺序模式\r\n      changePlayListDispatch(sequencePlayList);\r\n      let index = findIndex(currentSong, sequencePlayList);\r\n      changeCurrentIndexDispatch(index);\r\n      setModeText(\"顺序循环\");\r\n    } else if (newMode === 1) {\r\n      //单曲循环\r\n      changePlayListDispatch(sequencePlayList);\r\n      setModeText(\"单曲循环\");\r\n    } else if (newMode === 2) {\r\n      //随机播放\r\n      let newList = shuffle(sequencePlayList);\r\n      let index = findIndex(currentSong, newList);\r\n      changePlayListDispatch(newList);\r\n      changeCurrentIndexDispatch(index);\r\n      setModeText(\"随机播放\");\r\n    }\r\n    changeModeDispatch(newMode);\r\n    toastRef.current.show();\r\n  };\r\n\r\n  const handleNext = () => {\r\n    //播放列表只有一首歌时单曲循环\r\n    if (playList.length === 1) {\r\n      handleLoop();\r\n      return;\r\n    }\r\n    let index = currentIndex + 1;\r\n    if (index === playList.length) index = 0;\r\n    if (!playing) togglePlayingDispatch(true);\r\n    changeCurrentIndexDispatch(index);\r\n  };\r\n\r\n  const handleEnd = () => {\r\n    if (mode === playMode.loop) {\r\n      handleLoop();\r\n    } else {\r\n      handleNext();\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      { isEmptyObject(currentSong) ? null : (\r\n        <MiniPlayer\r\n          song={currentSong}\r\n          fullScreen={fullScreen}\r\n          playing={playing}\r\n          toggleFullScreen={toggleFullScreenDispatch}\r\n          clickPlaying={clickPlaying}\r\n          percent={percent}\r\n        /> \r\n        )\r\n      }\r\n      { isEmptyObject(currentSong) ? null : (\r\n        <NormalPlayer\r\n          song={currentSong}\r\n          fullScreen={fullScreen}\r\n          playing={playing}\r\n          mode={mode}\r\n          changeMode={changeMode}\r\n          duration={duration}\r\n          currentTime={currentTime}\r\n          percent={percent}\r\n          toggleFullScreen={toggleFullScreenDispatch}\r\n          clickPlaying={clickPlaying}\r\n          onProgressChange={onProgressChange}\r\n          handlePrev={handlePrev}\r\n          handleNext={handleNext}\r\n        />\r\n        )\r\n      }\r\n      <audio\r\n        ref={audioRef}\r\n        onTimeUpdate={updateTime}\r\n        onEnded={handleEnd}\r\n      ></audio>\r\n      <Toast text={modeText} ref={toastRef}></Toast>  \r\n    </div>\r\n  )\r\n}\r\n\r\n// 映射Redux全局的state到组件的props上\r\nconst mapStateToProps = state => ({\r\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\r\n  playing: state.getIn([\"player\", \"playing\"]),\r\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\r\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\r\n  mode: state.getIn([\"player\", \"mode\"]),\r\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\r\n  playList: state.getIn([\"player\", \"playList\"]),\r\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\r\n});\r\n\r\n// 映射dispatch到props上\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    togglePlayingDispatch(data) {\r\n      dispatch(changePlayingState(data));\r\n    },\r\n    toggleFullScreenDispatch(data) {\r\n      dispatch(changeFullScreen(data));\r\n    },\r\n    togglePlayListDispatch(data) {\r\n      dispatch(changeShowPlayList(data));\r\n    },\r\n    changeCurrentIndexDispatch(index) {\r\n      dispatch(changeCurrentIndex(index));\r\n    },\r\n    changeCurrentDispatch(data) {\r\n      dispatch(changeCurrentSong(data));\r\n    },\r\n    changeModeDispatch(data) {\r\n      dispatch(changePlayMode(data));\r\n    },\r\n    changePlayListDispatch(data) {\r\n      dispatch(changePlayList(data));\r\n    }\r\n  };\r\n};\r\n\r\n// 将ui组件包装成容器组件\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(React.memo(Player));"]},"metadata":{},"sourceType":"module"}