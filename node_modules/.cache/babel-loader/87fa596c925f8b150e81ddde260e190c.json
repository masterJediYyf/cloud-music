{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\86136\\\\Desktop\\\\\\u5B66\\u4E60\\u8FDB\\u5EA6\\\\new_html\\\\fullstack_yyf\\\\react\\\\cloud-music\\\\src\\\\application\\\\Rank\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { getRankList } from './store/index';\nimport { filterIndex } from '../../api/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Rank(props) {\n  _s();\n\n  const {\n    rankList: list,\n    loading\n  } = props;\n  const {\n    getRankListDataDispatch\n  } = props;\n  let rankList = list ? list.toJS() : [];\n  useEffect(() => {\n    getRankListDataDispatch();\n  }, []);\n  let globalStartIndex = filterIndex(rankList);\n  let officialList = rankList.slice(0, globalStartIndex);\n  let globalList = rankList.slice(globalStartIndex); // 这是渲染榜单列表函数，传入 global 变量来区分不同的布局方式\n\n  const renderRankList = (list, global) => {\n    return /*#__PURE__*/_jsxDEV(List, {\n      globalRank: global,\n      children: list.map(item => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          tracks: item.tracks,\n          onClick: () => enterDetail(item.name),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"img_wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.coverImgUrl,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"decorate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"update_frequecy\",\n              children: item.updateFrequency\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this), renderSongList(item.tracks)]\n        }, item.coverImgId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderSongList = list => {\n    return list.length ? /*#__PURE__*/_jsxDEV(SongList, {\n      children: list.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [index + 1, \". \", item.first, \" - \", item.second]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this) : null;\n  }; // 榜单数据未加载出来之前都给隐藏\n\n\n  let displayStyle = loading ? {\n    \"display\": \"none\"\n  } : {\n    \"display\": \"\"\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Scroll, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"offical\",\n          style: displayStyle,\n          children: \" \\u5B98\\u65B9\\u699C \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), renderRankList(officialList), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"global\",\n          style: displayStyle,\n          children: \" \\u5168\\u7403\\u699C \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), renderRankList(globalList, true), loading ? /*#__PURE__*/_jsxDEV(EnterLoading, {\n          children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 23\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), renderRoutes(props.route.routes)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n} //映射 Redux 全局的 state 到组件的 props 上\n\n\n_s(Rank, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Rank;\n\nconst mapStateToProps = state => ({\n  rankList: state.getIn(['rank', 'rankList']),\n  loading: state.getIn(['rank', 'loading'])\n}); //映射 dispatch 到 props 上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getRankListDataDispatch() {\n      dispatch(getRankList());\n    }\n\n  };\n}; // 高级组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Rank));\n\nvar _c;\n\n$RefreshReg$(_c, \"Rank\");","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/application/Rank/index.js"],"names":["React","useEffect","connect","getRankList","filterIndex","Rank","props","rankList","list","loading","getRankListDataDispatch","toJS","globalStartIndex","officialList","slice","globalList","renderRankList","global","map","item","tracks","enterDetail","name","coverImgUrl","updateFrequency","renderSongList","coverImgId","length","index","first","second","displayStyle","renderRoutes","route","routes","mapStateToProps","state","getIn","mapDispatchToProps","dispatch","memo"],"mappings":"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","sourcesContent":["import React,{useEffect} from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {getRankList} from './store/index'\r\nimport {filterIndex} from '../../api/utils'\r\n\r\nfunction Rank(props){\r\n    const {rankList:list,loading} = props;\r\n    const {getRankListDataDispatch} = props;\r\n\r\n    let rankList = list ? list.toJS() : [];\r\n\r\n    useEffect(() => {\r\n        getRankListDataDispatch();\r\n    },[])\r\n\r\n    let globalStartIndex = filterIndex (rankList);\r\n    let officialList = rankList.slice (0, globalStartIndex);\r\n    let globalList = rankList.slice (globalStartIndex);\r\n\r\n// 这是渲染榜单列表函数，传入 global 变量来区分不同的布局方式\r\nconst renderRankList = (list, global) => {\r\n    return (\r\n      <List globalRank={global}>\r\n        {\r\n        list.map ((item) => {\r\n          return (\r\n            <ListItem key={item.coverImgId} tracks={item.tracks} onClick={() => enterDetail (item.name)}>\r\n              <div className=\"img_wrapper\">\r\n                <img src={item.coverImgUrl} alt=\"\"/>\r\n                <div className=\"decorate\"></div>\r\n                <span className=\"update_frequecy\">{item.updateFrequency}</span>\r\n              </div>\r\n              { renderSongList (item.tracks)  }\r\n            </ListItem>\r\n          )\r\n        })\r\n      } \r\n      </List>\r\n    )\r\n  }\r\n  \r\n  const renderSongList = (list) => {\r\n    return list.length ? (\r\n      <SongList>\r\n        {\r\n          list.map ((item, index) => {\r\n            return <li key={index}>{index+1}. {item.first} - {item.second}</li>\r\n          })\r\n        }\r\n      </SongList>\r\n    ) : null;\r\n  }\r\n  \r\n  // 榜单数据未加载出来之前都给隐藏\r\n  let displayStyle = loading ? {\"display\":\"none\"}:  {\"display\": \"\"};\r\n  \r\n  return (\r\n    <Container>\r\n      <Scroll>\r\n        <div>\r\n          <h1 className=\"offical\" style={displayStyle}> 官方榜 </h1>\r\n            { renderRankList (officialList) }\r\n          <h1 className=\"global\" style={displayStyle}> 全球榜 </h1>\r\n            { renderRankList (globalList, true) }\r\n          { loading ? <EnterLoading><Loading></Loading></EnterLoading> : null }\r\n        </div>\r\n      </Scroll> \r\n      {renderRoutes (props.route.routes)}\r\n    </Container>\r\n    );\r\n}\r\n\r\n//映射 Redux 全局的 state 到组件的 props 上\r\nconst mapStateToProps = (state) => ({\r\n    rankList: state.getIn(['rank','rankList']),\r\n    loading: state.getIn(['rank','loading']),\r\n});\r\n\r\n//映射 dispatch 到 props 上\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        getRankListDataDispatch(){\r\n            dispatch(getRankList());\r\n        }\r\n    }\r\n}\r\n\r\n// 高级组件\r\nexport default connect(mapStateToProps,mapDispatchToProps)(React.memo(Rank));"]},"metadata":{},"sourceType":"module"}