{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\86136\\\\Desktop\\\\\\u5B66\\u4E60\\u8FDB\\u5EA6\\\\new_html\\\\fullstack_yyf\\\\react\\\\cloud-music\\\\src\\\\application\\\\Player\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport MiniPlayer from './miniPlayer';\nimport NormalPlayer from './normalPlayer';\nimport { changePlayingState, changeShowPlayList, changeCurrentIndex, changeCurrentSong, changePlayList, changePlayMode, changeFullScreen } from './store/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Player(props) {\n  _s();\n\n  // 目前播放时间\n  const [currentTime, setCurrentTime] = useState(0); // 歌曲总时长\n\n  const [duration, setDuration] = useState(0); //歌曲播放进度\n\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\n  const {\n    fullScreen,\n    playing,\n    currentIndex,\n    currentSong: immutableCurrentSong\n  } = props;\n  const {\n    toggleFullScreenDispatch,\n    togglePlayListDispatch,\n    changeCurrentIndexDispatch,\n    changeCurrentDispatch\n  } = props;\n  let currentSong = immutableCurrentSong.toJS();\n  const audioRef = useRef();\n\n  const clickPlaying = (e, state) => {\n    e.stopPropagation();\n    togglePlayListDispatch(state);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MiniPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      toggleFullScreen: toggleFullScreenDispatch,\n      playing: playing,\n      clickPlaying: clickPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(NormalPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      toggleFullScreen: toggleFullScreenDispatch,\n      playing: playing,\n      clickPlaying: clickPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n} //映射 Redux 全局的 state 到组件的 props 上\n\n\n_s(Player, \"V36ig0x0usiKGS+DimJ1vHuPS3Y=\");\n\n_c = Player;\n\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\n  playing: state.getIn([\"player\", \"playing\"]),\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\n  mode: state.getIn([\"player\", \"mode\"]),\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\n  playList: state.getIn([\"player\", \"playList\"]),\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\n}); //映射 dispatch 到 props 上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    togglePlayingDispatch(data) {\n      dispatch(changePlayingState(data));\n    },\n\n    toggleFullScreenDispatch(data) {\n      dispatch(changeFullScreen(data));\n    },\n\n    togglePlayListDispatch(data) {\n      dispatch(changeShowPlayList(data));\n    },\n\n    changeCurrentIndexDispatch(index) {\n      dispatch(changeCurrentIndex(index));\n    },\n\n    changeCurrentDispatch(data) {\n      dispatch(changeCurrentSong(data));\n    },\n\n    changeModeDispatch(data) {\n      dispatch(changePlayMode(data));\n    },\n\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    }\n\n  };\n}; // 将ui 组件 包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Player));\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/application/Player/index.js"],"names":["React","useRef","useState","useEffect","connect","MiniPlayer","NormalPlayer","changePlayingState","changeShowPlayList","changeCurrentIndex","changeCurrentSong","changePlayList","changePlayMode","changeFullScreen","Player","props","currentTime","setCurrentTime","duration","setDuration","percent","isNaN","fullScreen","playing","currentIndex","currentSong","immutableCurrentSong","toggleFullScreenDispatch","togglePlayListDispatch","changeCurrentIndexDispatch","changeCurrentDispatch","toJS","audioRef","clickPlaying","e","state","stopPropagation","mapStateToProps","getIn","showPlayList","mode","playList","sequencePlayList","mapDispatchToProps","dispatch","togglePlayingDispatch","data","index","changeModeDispatch","changePlayListDispatch","memo"],"mappings":"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","sourcesContent":["import React,{useRef,useState,useEffect} from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport MiniPlayer from './miniPlayer';\r\nimport NormalPlayer from './normalPlayer';\r\n\r\nimport {\r\n    changePlayingState,\r\n    changeShowPlayList,\r\n    changeCurrentIndex,\r\n    changeCurrentSong,\r\n    changePlayList,\r\n    changePlayMode,\r\n    changeFullScreen\r\n} from './store/actionCreators';\r\n\r\nfunction Player(props){\r\n    // 目前播放时间\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n\r\n    // 歌曲总时长\r\n    const [duration, setDuration] = useState(0);\r\n    \r\n    //歌曲播放进度\r\n    let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\r\n\r\n    const { fullScreen ,playing, currentIndex,currentSong: immutableCurrentSong } = props;\r\n\r\n    const { toggleFullScreenDispatch ,togglePlayListDispatch,changeCurrentIndexDispatch,changeCurrentDispatch} = props;\r\n\r\n    let currentSong = immutableCurrentSong.toJS();\r\n\r\n    const audioRef = useRef();\r\n\r\n    const clickPlaying = (e,state) => {\r\n      e.stopPropagation();\r\n      togglePlayListDispatch(state);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n          <MiniPlayer \r\n            song={currentSong} \r\n            fullScreen={fullScreen}\r\n            toggleFullScreen={toggleFullScreenDispatch}\r\n            playing={playing}\r\n            clickPlaying={clickPlaying}\r\n          />\r\n          <NormalPlayer \r\n            song={currentSong}\r\n            fullScreen={fullScreen}\r\n            toggleFullScreen={toggleFullScreenDispatch}\r\n            playing={playing}\r\n            clickPlaying={clickPlaying}\r\n          />\r\n          <audio ref={audioRef}></audio>\r\n        </div>\r\n    )\r\n}\r\n\r\n//映射 Redux 全局的 state 到组件的 props 上\r\nconst mapStateToProps = state => ({\r\n    fullScreen: state.getIn ([\"player\", \"fullScreen\"]),\r\n    playing: state.getIn ([\"player\", \"playing\"]),\r\n    currentSong: state.getIn ([\"player\", \"currentSong\"]),\r\n    showPlayList: state.getIn ([\"player\", \"showPlayList\"]),\r\n    mode: state.getIn ([\"player\", \"mode\"]),\r\n    currentIndex: state.getIn ([\"player\", \"currentIndex\"]),\r\n    playList: state.getIn ([\"player\", \"playList\"]),\r\n    sequencePlayList: state.getIn ([\"player\", \"sequencePlayList\"])\r\n})\r\n\r\n//映射 dispatch 到 props 上\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n      togglePlayingDispatch (data) {\r\n        dispatch (changePlayingState (data));\r\n      },\r\n      toggleFullScreenDispatch (data) {\r\n        dispatch (changeFullScreen (data));\r\n      },\r\n      togglePlayListDispatch (data) {\r\n        dispatch (changeShowPlayList (data));\r\n      },\r\n      changeCurrentIndexDispatch (index) {\r\n        dispatch (changeCurrentIndex (index));\r\n      },\r\n      changeCurrentDispatch (data) {\r\n        dispatch (changeCurrentSong (data));\r\n      },\r\n      changeModeDispatch (data) {\r\n        dispatch (changePlayMode (data));\r\n      },\r\n      changePlayListDispatch (data) {\r\n        dispatch (changePlayList (data));\r\n      }\r\n    };\r\n};\r\n\r\n// 将ui 组件 包装成容器组件\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(React.memo(Player));"]},"metadata":{},"sourceType":"module"}