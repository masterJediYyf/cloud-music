{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\86136\\\\Desktop\\\\\\u5B66\\u4E60\\u8FDB\\u5EA6\\\\new_html\\\\fullstack_yyf\\\\react\\\\cloud-music\\\\src\\\\application\\\\Player\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { changePlayingState, changeShowPlayList, changeCurrentIndex, changeCurrentSong, changePlayList, changePlayMode, changeFullScreen } from \"./store/actionCreators\";\nimport MiniPlayer from './miniPlayer';\nimport NormalPlayer from './normalPlayer';\nimport { getSongUrl, isEmptyObject, shuffle, findIndex } from \"../../api/utils\";\nimport { playMode } from '../../api/config';\nimport Toast from \"./../../baseUI/Toast/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Player(props) {\n  _s();\n\n  //目前播放时间\n  const [currentTime, setCurrentTime] = useState(0); //歌曲总时长\n\n  const [duration, setDuration] = useState(0); //歌曲播放进度\n\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\n  const [preSong, setPreSong] = useState({});\n  const [modeText, setModeText] = useState(\"\");\n  const [songReady, setSongReady] = useState(true);\n  const audioRef = useRef();\n  const toastRef = useRef();\n  const {\n    playing,\n    currentSong: immutableCurrentSong,\n    currentIndex,\n    playList: immutablePlayList,\n    mode,\n    //播放模式\n    sequencePlayList: immutableSequencePlayList,\n    //顺序列表\n    fullScreen\n  } = props;\n  const {\n    togglePlayingDispatch,\n    changeCurrentIndexDispatch,\n    changeCurrentDispatch,\n    changePlayListDispatch,\n    //改变playList\n    changeModeDispatch,\n    //改变mode\n    toggleFullScreenDispatch\n  } = props;\n  const playList = immutablePlayList.toJS();\n  const sequencePlayList = immutableSequencePlayList.toJS();\n  const currentSong = immutableCurrentSong.toJS();\n  useEffect(() => {\n    if (!playList.length || currentIndex === -1 || !playList[currentIndex] || playList[currentIndex].id === preSong.id || !songReady) return;\n    let current = playList[currentIndex];\n    setPreSong(current);\n    setSongReady(false);\n    changeCurrentDispatch(current); //赋值currentSong\n\n    audioRef.current.src = getSongUrl(current.id);\n    setTimeout(() => {\n      audioRef.current.play().then(() => {\n        setSongReady(true);\n      });\n    });\n    togglePlayingDispatch(true); //播放状态\n\n    setCurrentTime(0); //从头开始播放\n\n    setDuration(current.dt / 1000 | 0); //时长\n  }, [playList, currentIndex]);\n  useEffect(() => {\n    playing ? audioRef.current.play() : audioRef.current.pause();\n  }, [playing]);\n\n  const clickPlaying = (e, state) => {\n    e.stopPropagation();\n    togglePlayingDispatch(state);\n  };\n\n  const updateTime = e => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const onProgressChange = curPercent => {\n    const newTime = curPercent * duration;\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n\n    if (!playing) {\n      togglePlayingDispatch(true);\n    }\n  }; //一首歌循环\n\n\n  const handleLoop = () => {\n    audioRef.current.currentTime = 0;\n    changePlayingState(true);\n    audioRef.current.play();\n  };\n\n  const handlePrev = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex - 1;\n    if (index < 0) index = playList.length - 1;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const changeMode = () => {\n    let newMode = (mode + 1) % 3;\n\n    if (newMode === 0) {\n      //顺序模式\n      changePlayListDispatch(sequencePlayList);\n      let index = findIndex(currentSong, sequencePlayList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"顺序循环\");\n    } else if (newMode === 1) {\n      //单曲循环\n      changePlayListDispatch(sequencePlayList);\n      setModeText(\"单曲循环\");\n    } else if (newMode === 2) {\n      //随机播放\n      let newList = shuffle(sequencePlayList);\n      let index = findIndex(currentSong, newList);\n      changePlayListDispatch(newList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"随机播放\");\n    }\n\n    changeModeDispatch(newMode);\n    toastRef.current.show();\n  };\n\n  const handleNext = () => {\n    //播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex + 1;\n    if (index === playList.length) index = 0;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const handleEnd = () => {\n    if (mode === playMode.loop) {\n      handleLoop();\n    } else {\n      handleNext();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(MiniPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      percent: percent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this), isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(NormalPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      mode: mode,\n      changeMode: changeMode,\n      duration: duration,\n      currentTime: currentTime,\n      percent: percent,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      onProgressChange: onProgressChange,\n      handlePrev: handlePrev,\n      handleNext: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      onTimeUpdate: updateTime,\n      onEnded: handleEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      text: modeText,\n      ref: toastRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n} // 映射Redux全局的state到组件的props上\n\n\n_s(Player, \"2tlkw6XXGfIghbbL/kbrM/4qGuI=\");\n\n_c = Player;\n\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\n  playing: state.getIn([\"player\", \"playing\"]),\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\n  mode: state.getIn([\"player\", \"mode\"]),\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\n  playList: state.getIn([\"player\", \"playList\"]),\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\n}); // 映射dispatch到props上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    togglePlayingDispatch(data) {\n      dispatch(changePlayingState(data));\n    },\n\n    toggleFullScreenDispatch(data) {\n      dispatch(changeFullScreen(data));\n    },\n\n    togglePlayListDispatch(data) {\n      dispatch(changeShowPlayList(data));\n    },\n\n    changeCurrentIndexDispatch(index) {\n      dispatch(changeCurrentIndex(index));\n    },\n\n    changeCurrentDispatch(data) {\n      dispatch(changeCurrentSong(data));\n    },\n\n    changeModeDispatch(data) {\n      dispatch(changePlayMode(data));\n    },\n\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    }\n\n  };\n}; // 将ui组件包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Player));\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/application/Player/index.js"],"names":["React","useRef","useState","useEffect","connect","changePlayingState","changeShowPlayList","changeCurrentIndex","changeCurrentSong","changePlayList","changePlayMode","changeFullScreen","MiniPlayer","NormalPlayer","getSongUrl","isEmptyObject","shuffle","findIndex","playMode","Toast","Player","props","currentTime","setCurrentTime","duration","setDuration","percent","isNaN","preSong","setPreSong","modeText","setModeText","songReady","setSongReady","audioRef","toastRef","playing","currentSong","immutableCurrentSong","currentIndex","playList","immutablePlayList","mode","sequencePlayList","immutableSequencePlayList","fullScreen","togglePlayingDispatch","changeCurrentIndexDispatch","changeCurrentDispatch","changePlayListDispatch","changeModeDispatch","toggleFullScreenDispatch","toJS","length","id","current","src","setTimeout","play","then","dt","pause","clickPlaying","e","state","stopPropagation","updateTime","target","onProgressChange","curPercent","newTime","handleLoop","handlePrev","index","changeMode","newMode","newList","show","handleNext","handleEnd","loop","mapStateToProps","getIn","showPlayList","mapDispatchToProps","dispatch","data","togglePlayListDispatch","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  changePlayingState,\r\n  changeShowPlayList,\r\n  changeCurrentIndex,\r\n  changeCurrentSong,\r\n  changePlayList,\r\n  changePlayMode,\r\n  changeFullScreen\r\n} from \"./store/actionCreators\";\r\nimport MiniPlayer from './miniPlayer';\r\nimport NormalPlayer from './normalPlayer';\r\nimport { getSongUrl, isEmptyObject, shuffle, findIndex } from \"../../api/utils\";\r\nimport { playMode } from '../../api/config';\r\nimport Toast from \"./../../baseUI/Toast/index\";\r\n\r\nfunction Player(props) {\r\n  //目前播放时间\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  //歌曲总时长\r\n  const [duration, setDuration] = useState(0);\r\n  //歌曲播放进度\r\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\r\n\r\n  const [preSong, setPreSong] = useState({});\r\n  const [modeText, setModeText] = useState(\"\");\r\n  const [songReady, setSongReady] = useState(true);\r\n\r\n  const audioRef = useRef();\r\n  const toastRef = useRef();\r\n\r\n  const {\r\n    playing,\r\n    currentSong:immutableCurrentSong,\r\n    currentIndex,\r\n    playList:immutablePlayList,\r\n    mode,//播放模式\r\n    sequencePlayList:immutableSequencePlayList,//顺序列表\r\n    fullScreen\r\n  } = props;\r\n  \r\n  const {\r\n    togglePlayingDispatch,\r\n    changeCurrentIndexDispatch,\r\n    changeCurrentDispatch,\r\n    changePlayListDispatch,//改变playList\r\n    changeModeDispatch,//改变mode\r\n    toggleFullScreenDispatch\r\n  } = props;\r\n  \r\n  const playList = immutablePlayList.toJS();\r\n  const sequencePlayList = immutableSequencePlayList.toJS();\r\n  const currentSong = immutableCurrentSong.toJS();\r\n\r\n  \r\n  useEffect(() => {\r\n    if (\r\n      !playList.length ||\r\n      currentIndex === -1 ||\r\n      !playList[currentIndex] ||\r\n      playList[currentIndex].id === preSong.id ||\r\n      !songReady\r\n    )\r\n      return;\r\n    let current = playList[currentIndex];\r\n    setPreSong(current);\r\n    setSongReady(false);\r\n    changeCurrentDispatch(current);//赋值currentSong\r\n    audioRef.current.src = getSongUrl(current.id);\r\n    setTimeout(() => {\r\n      audioRef.current.play().then(() => {\r\n        setSongReady(true);\r\n      });\r\n    });\r\n    togglePlayingDispatch(true);//播放状态\r\n    setCurrentTime(0);//从头开始播放\r\n    setDuration((current.dt / 1000) | 0);//时长\r\n  }, [playList, currentIndex]);\r\n\r\n  useEffect(() => {\r\n    playing ? audioRef.current.play() : audioRef.current.pause();\r\n  }, [playing]);\r\n\r\n  const clickPlaying = (e, state) => {\r\n    e.stopPropagation();\r\n    togglePlayingDispatch(state);\r\n  };\r\n\r\n  const updateTime = e => {\r\n    setCurrentTime(e.target.currentTime);\r\n  };\r\n\r\n  const onProgressChange = curPercent => {\r\n    const newTime = curPercent * duration;\r\n    setCurrentTime(newTime);\r\n    audioRef.current.currentTime = newTime;\r\n    if (!playing) {\r\n      togglePlayingDispatch(true);\r\n    }\r\n  };\r\n  //一首歌循环\r\n  const handleLoop = () => {\r\n    audioRef.current.currentTime = 0;\r\n    changePlayingState(true);\r\n    audioRef.current.play();\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    //播放列表只有一首歌时单曲循环\r\n    if (playList.length === 1) {\r\n      handleLoop();\r\n      return;\r\n    }\r\n    let index = currentIndex - 1;\r\n    if (index < 0) index = playList.length - 1;\r\n    if (!playing) togglePlayingDispatch(true);\r\n    changeCurrentIndexDispatch(index);\r\n  };\r\n\r\n  const changeMode = () => {\r\n    let newMode = (mode + 1) % 3;\r\n    if (newMode === 0) {\r\n      //顺序模式\r\n      changePlayListDispatch(sequencePlayList);\r\n      let index = findIndex(currentSong, sequencePlayList);\r\n      changeCurrentIndexDispatch(index);\r\n      setModeText(\"顺序循环\");\r\n    } else if (newMode === 1) {\r\n      //单曲循环\r\n      changePlayListDispatch(sequencePlayList);\r\n      setModeText(\"单曲循环\");\r\n    } else if (newMode === 2) {\r\n      //随机播放\r\n      let newList = shuffle(sequencePlayList);\r\n      let index = findIndex(currentSong, newList);\r\n      changePlayListDispatch(newList);\r\n      changeCurrentIndexDispatch(index);\r\n      setModeText(\"随机播放\");\r\n    }\r\n    changeModeDispatch(newMode);\r\n    toastRef.current.show();\r\n  };\r\n\r\n  const handleNext = () => {\r\n    //播放列表只有一首歌时单曲循环\r\n    if (playList.length === 1) {\r\n      handleLoop();\r\n      return;\r\n    }\r\n    let index = currentIndex + 1;\r\n    if (index === playList.length) index = 0;\r\n    if (!playing) togglePlayingDispatch(true);\r\n    changeCurrentIndexDispatch(index);\r\n  };\r\n\r\n  const handleEnd = () => {\r\n    if (mode === playMode.loop) {\r\n      handleLoop();\r\n    } else {\r\n      handleNext();\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      { isEmptyObject(currentSong) ? null : (\r\n        <MiniPlayer\r\n          song={currentSong}\r\n          fullScreen={fullScreen}\r\n          playing={playing}\r\n          toggleFullScreen={toggleFullScreenDispatch}\r\n          clickPlaying={clickPlaying}\r\n          percent={percent}\r\n        /> \r\n        )\r\n      }\r\n      { isEmptyObject(currentSong) ? null : (\r\n        <NormalPlayer\r\n          song={currentSong}\r\n          fullScreen={fullScreen}\r\n          playing={playing}\r\n          mode={mode}\r\n          changeMode={changeMode}\r\n          duration={duration}\r\n          currentTime={currentTime}\r\n          percent={percent}\r\n          toggleFullScreen={toggleFullScreenDispatch}\r\n          clickPlaying={clickPlaying}\r\n          onProgressChange={onProgressChange}\r\n          handlePrev={handlePrev}\r\n          handleNext={handleNext}\r\n        />\r\n        )\r\n      }\r\n      <audio\r\n        ref={audioRef}\r\n        onTimeUpdate={updateTime}\r\n        onEnded={handleEnd}\r\n      ></audio>\r\n      <Toast text={modeText} ref={toastRef}></Toast>  \r\n    </div>\r\n  )\r\n}\r\n\r\n// 映射Redux全局的state到组件的props上\r\nconst mapStateToProps = state => ({\r\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\r\n  playing: state.getIn([\"player\", \"playing\"]),\r\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\r\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\r\n  mode: state.getIn([\"player\", \"mode\"]),\r\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\r\n  playList: state.getIn([\"player\", \"playList\"]),\r\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\r\n});\r\n\r\n// 映射dispatch到props上\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    togglePlayingDispatch(data) {\r\n      dispatch(changePlayingState(data));\r\n    },\r\n    toggleFullScreenDispatch(data) {\r\n      dispatch(changeFullScreen(data));\r\n    },\r\n    togglePlayListDispatch(data) {\r\n      dispatch(changeShowPlayList(data));\r\n    },\r\n    changeCurrentIndexDispatch(index) {\r\n      dispatch(changeCurrentIndex(index));\r\n    },\r\n    changeCurrentDispatch(data) {\r\n      dispatch(changeCurrentSong(data));\r\n    },\r\n    changeModeDispatch(data) {\r\n      dispatch(changePlayMode(data));\r\n    },\r\n    changePlayListDispatch(data) {\r\n      dispatch(changePlayList(data));\r\n    }\r\n  };\r\n};\r\n\r\n// 将ui组件包装成容器组件\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(React.memo(Player));"]},"metadata":{},"sourceType":"module"}