{"ast":null,"code":"import { RankTypes } from \"./config\"; //防抖函数\n\nconst debounce = (func, delay) => {\n  let timer;\n  return function (...args) {\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(() => {\n      func.apply(this, args);\n      clearTimeout(timer);\n    }, delay);\n  };\n};\n\nexport { debounce }; //处理歌手列表拼接歌手名字\n\nexport const getName = list => {\n  let str = \"\";\n  list.map((item, index) => {\n    str += index === 0 ? item.name : \"/\" + item.name;\n    return item;\n  });\n  return str;\n}; //处理数据，找出第一个没有歌名的排行榜的索引\n\nexport const filterIndex = rankList => {\n  for (let i = 0; i < rankList.length - 1; i++) {\n    if (rankList[i].tracks.length && !rankList[i + 1].tracks.length) {\n      return i + 1;\n    }\n  }\n}; //找出排行榜的编号\n\nexport const filterIdx = name => {\n  for (let key in RankTypes) {\n    if (RankTypes[key] === name) return key;\n  }\n\n  return null;\n}; // 给css3相关属性增加浏览器前缀，处理浏览器兼容性问题\n\nlet elementStyle = document.createElement(\"div\").style;\n\nlet vendor = (() => {\n  //首先通过transition属性判断是何种浏览器\n  let transformNames = {\n    webkit: \"webkitTransform\",\n    Moz: \"MozTransform\",\n    O: \"OTransfrom\",\n    ms: \"msTransform\",\n    standard: \"Transform\"\n  };\n\n  for (let key in transformNames) {\n    if (elementStyle[transformNames[key]] !== undefined) {\n      return key;\n    }\n  }\n\n  return false;\n})();\n\nexport function prefixStyle(style) {\n  if (vendor === false) {\n    return false;\n  }\n\n  if (vendor === \"standard\") {\n    return style;\n  }\n\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1);\n} //判断一个对象是否为空对象\n\nexport const isEmptyObject = obj => !obj || Object.keys(obj).length === 0; //转换歌曲播放时间\n\nexport const formatPlayTime = interval => {\n  interval = interval | 0;\n  const minute = interval / 60 | 0;\n  const second = (interval % 60).toString().padStart(2, \"0\");\n  return `${minute}:${second}`;\n};\nexport const getTransitionEndName = dom => {\n  let cssTransition = [\"transition\", \"webkitTransition\"];\n  let transitionEnd = {\n    transition: \"transitionend\",\n    webkitTransition: \"webkitTransitionEnd\"\n  };\n\n  for (let i = 0; i < cssTransition.length; i++) {\n    if (dom.style[cssTransition[i]] !== undefined) {\n      return transitionEnd[cssTransition[i]];\n    }\n  }\n\n  return undefined;\n};\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} // 随机算法\n\n\nexport function shuffle(arr) {\n  let new_arr = [];\n  arr.forEach(item => {\n    new_arr.push(item);\n  });\n\n  for (let i = 0; i < new_arr.length; i++) {\n    let j = getRandomInt(0, i);\n    let t = new_arr[i];\n    new_arr[i] = new_arr[j];\n    new_arr[j] = t;\n  }\n\n  return new_arr;\n} // 找到当前的歌曲索引\n\nexport const findIndex = (song, list) => {\n  return list.findIndex(item => {\n    return song.id === item.id;\n  });\n}; //拼接出歌曲的url链接\n\nexport const getSongUrl = id => {\n  return `https://music.163.com/song/media/outer/url?id=${id}.mp3`;\n}; //除去手机号码的空格符号\n\nexport const trimPhone = val => val.replace(/(^\\s+)|(\\s+$)|\\s+/g, \"\");","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/api/utils.js"],"names":["RankTypes","debounce","func","delay","timer","args","clearTimeout","setTimeout","apply","getName","list","str","map","item","index","name","filterIndex","rankList","i","length","tracks","filterIdx","key","elementStyle","document","createElement","style","vendor","transformNames","webkit","Moz","O","ms","standard","undefined","prefixStyle","charAt","toUpperCase","substr","isEmptyObject","obj","Object","keys","formatPlayTime","interval","minute","second","toString","padStart","getTransitionEndName","dom","cssTransition","transitionEnd","transition","webkitTransition","getRandomInt","min","max","Math","floor","random","shuffle","arr","new_arr","forEach","push","j","t","findIndex","song","id","getSongUrl","trimPhone","val","replace"],"mappings":"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","sourcesContent":["import { RankTypes } from \"./config\";\r\n//防抖函数\r\n\r\nconst debounce = (func, delay) => {\r\n  let timer;\r\n  return function (...args) {\r\n    if(timer) {\r\n      clearTimeout(timer);\r\n    }\r\n    timer = setTimeout(() => {\r\n      func.apply(this, args);\r\n      clearTimeout(timer);\r\n    }, delay);\r\n  };\r\n};\r\n\r\nexport { debounce };\r\n\r\n//处理歌手列表拼接歌手名字\r\nexport const getName = list => {\r\n  let str = \"\";\r\n  list.map((item, index) => {\r\n    str += index === 0 ? item.name : \"/\" + item.name;\r\n    return item;\r\n  });\r\n  return str;\r\n};\r\n\r\n//处理数据，找出第一个没有歌名的排行榜的索引\r\nexport const filterIndex = rankList => {\r\n  for (let i = 0; i < rankList.length - 1; i++) {\r\n    if (rankList[i].tracks.length && !rankList[i + 1].tracks.length) {\r\n      return i + 1;\r\n    }\r\n  }\r\n};\r\n\r\n//找出排行榜的编号\r\nexport const filterIdx = name => {\r\n  for (let key in RankTypes) {\r\n    if (RankTypes[key] === name) return key;\r\n  }\r\n  return null;\r\n};\r\n\r\n// 给css3相关属性增加浏览器前缀，处理浏览器兼容性问题\r\nlet elementStyle = document.createElement(\"div\").style;\r\n\r\nlet vendor = (() => {\r\n  //首先通过transition属性判断是何种浏览器\r\n  let transformNames = {\r\n    webkit: \"webkitTransform\",\r\n    Moz: \"MozTransform\",\r\n    O: \"OTransfrom\",\r\n    ms: \"msTransform\",\r\n    standard: \"Transform\"\r\n  };\r\n  for (let key in transformNames) {\r\n    if (elementStyle[transformNames[key]] !== undefined) {\r\n      return key;\r\n    }\r\n  }\r\n  return false;\r\n})();\r\n\r\nexport function prefixStyle(style) {\r\n  if (vendor === false) {\r\n    return false;\r\n  }\r\n  if (vendor === \"standard\") {\r\n    return style;\r\n  }\r\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1);\r\n}\r\n\r\n//判断一个对象是否为空对象\r\nexport const isEmptyObject = obj => !obj || Object.keys(obj).length === 0;\r\n\r\n//转换歌曲播放时间\r\nexport const formatPlayTime = interval => {\r\n  interval = interval | 0;\r\n  const minute = (interval / 60) | 0;\r\n  const second = (interval % 60).toString().padStart(2, \"0\");\r\n  return `${minute}:${second}`;\r\n};\r\n\r\nexport const getTransitionEndName = dom => {\r\n  let cssTransition = [\"transition\", \"webkitTransition\"];\r\n  let transitionEnd = {\r\n    transition: \"transitionend\",\r\n    webkitTransition: \"webkitTransitionEnd\"\r\n  };\r\n  for (let i = 0; i < cssTransition.length; i++) {\r\n    if (dom.style[cssTransition[i]] !== undefined) {\r\n      return transitionEnd[cssTransition[i]];\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\nfunction getRandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// 随机算法\r\nexport function shuffle(arr) {\r\n  let new_arr = [];\r\n  arr.forEach(item => {\r\n    new_arr.push(item);\r\n  });\r\n  for (let i = 0; i < new_arr.length; i++) {\r\n    let j = getRandomInt(0, i);\r\n    let t = new_arr[i];\r\n    new_arr[i] = new_arr[j];\r\n    new_arr[j] = t;\r\n  }\r\n  return new_arr;\r\n}\r\n\r\n// 找到当前的歌曲索引\r\nexport const findIndex = (song, list) => {\r\n  return list.findIndex(item => {\r\n    return song.id === item.id;\r\n  });\r\n};\r\n\r\n//拼接出歌曲的url链接\r\nexport const getSongUrl = id => {\r\n  return `https://music.163.com/song/media/outer/url?id=${id}.mp3`;\r\n};\r\n//除去手机号码的空格符号\r\n\r\nexport const trimPhone = val => val.replace(/(^\\s+)|(\\s+$)|\\s+/g, \"\");\r\n"]},"metadata":{},"sourceType":"module"}