{"ast":null,"code":"import * as actionTypes from './constants';\nimport { fromJS } from 'immutable';\nimport { playMode } from './../../../api/config';\nimport { findIndex } from '../../../api/utils';\nconst defaultState = fromJS({\n  fullScreen: false,\n  playing: false,\n  sequencePlayList: [],\n  playList: [],\n  mode: playMode.sequence,\n  currentIndex: -1,\n  showPlayList: false,\n  currentSong: {},\n  speed: 1\n});\n\nconst handleInsertSong = (state, song) => {\n  const playList = JSON.parse(JSON.stringify(state.get('playList').toJS()));\n  const sequenceList = JSON.parse(JSON.stringify(state.get('sequencePlayList').toJS()));\n  let currentIndex = state.get('currentIndex'); //看看有没有同款\n\n  let fpIndex = findIndex(song, playList); // 如果是当前歌曲直接不处理\n\n  if (fpIndex === currentIndex && currentIndex !== -1) return state;\n  currentIndex++; // 把歌放进去,放到当前播放曲目的下一个位置\n\n  playList.splice(currentIndex, 0, song); // 如果列表中已经存在要添加的歌\n\n  if (fpIndex > -1) {\n    if (currentIndex > fpIndex) {\n      playList.splice(fpIndex, 1);\n      currentIndex--;\n    } else {\n      playList.splice(fpIndex + 1, 1);\n    }\n  }\n\n  let sequenceIndex = findIndex(playList[currentIndex], sequenceList) + 1;\n  let fsIndex = findIndex(song, sequenceList);\n  sequenceList.splice(sequenceIndex, 0, song);\n\n  if (fsIndex > -1) {\n    if (sequenceIndex > fsIndex) {\n      sequenceList.splice(fsIndex, 1);\n      sequenceIndex--;\n    } else {\n      sequenceList.splice(fsIndex + 1, 1);\n    }\n  }\n\n  return state.merge({\n    'playList': fromJS(playList),\n    'sequencePlayList': fromJS(sequenceList),\n    'currentIndex': fromJS(currentIndex)\n  });\n};\n\nconst handleDeleteSong = (state, song) => {\n  const playList = JSON.parse(JSON.stringify(state.get('playList').toJS()));\n  const sequenceList = JSON.parse(JSON.stringify(state.get('sequencePlayList').toJS()));\n  let currentIndex = state.get('currentIndex');\n  const fpIndex = findIndex(song, playList);\n  playList.splice(fpIndex, 1);\n  if (fpIndex < currentIndex) currentIndex--;\n  const fsIndex = findIndex(song, sequenceList);\n  sequenceList.splice(fsIndex, 1);\n  return state.merge({\n    'playList': fromJS(playList),\n    'sequencePlayList': fromJS(sequenceList),\n    'currentIndex': fromJS(currentIndex)\n  });\n};\n\nexport default ((state = defaultState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_SONG:\n      return state.set('currentSong', action.data);\n\n    case actionTypes.SET_FULL_SCREEN:\n      return state.set('fullScreen', action.data);\n\n    case actionTypes.SET_PLAYING_STATE:\n      return state.set('playing', action.data);\n\n    case actionTypes.SET_SEQUECE_PLAYLIST:\n      return state.set('sequencePlayList', action.data);\n\n    case actionTypes.SET_PLAYLIST:\n      return state.set('playList', action.data);\n\n    case actionTypes.SET_PLAY_MODE:\n      return state.set('mode', action.data);\n\n    case actionTypes.SET_CURRENT_INDEX:\n      return state.set('currentIndex', action.data);\n\n    case actionTypes.SET_SHOW_PLAYLIST:\n      return state.set('showPlayList', action.data);\n\n    case actionTypes.INSERT_SONG:\n      return handleInsertSong(state, action.data);\n\n    case actionTypes.DELETE_SONG:\n      return handleDeleteSong(state, action.data);\n\n    case actionTypes.CHANGE_SPEED:\n      return state.set('speed', action.data);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/application/Player/store/reducer.js"],"names":["actionTypes","fromJS","playMode","findIndex","defaultState","fullScreen","playing","sequencePlayList","playList","mode","sequence","currentIndex","showPlayList","currentSong","speed","handleInsertSong","state","song","JSON","parse","stringify","get","toJS","sequenceList","fpIndex","splice","sequenceIndex","fsIndex","merge","handleDeleteSong","action","type","SET_CURRENT_SONG","set","data","SET_FULL_SCREEN","SET_PLAYING_STATE","SET_SEQUECE_PLAYLIST","SET_PLAYLIST","SET_PLAY_MODE","SET_CURRENT_INDEX","SET_SHOW_PLAYLIST","INSERT_SONG","DELETE_SONG","CHANGE_SPEED"],"mappings":"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","sourcesContent":["import * as actionTypes from './constants';\r\nimport { fromJS } from 'immutable';\r\nimport { playMode } from './../../../api/config';\r\nimport { findIndex } from '../../../api/utils';\r\n\r\nconst defaultState = fromJS({\r\n  fullScreen: false,\r\n  playing: false,\r\n  sequencePlayList: [],\r\n  playList: [],\r\n  mode: playMode.sequence,\r\n  currentIndex: -1,\r\n  showPlayList: false,\r\n  currentSong: {},\r\n  speed: 1\r\n});\r\n\r\nconst handleInsertSong = (state, song) => {\r\n  const playList = JSON.parse(JSON.stringify(state.get('playList').toJS()));\r\n  const sequenceList = JSON.parse(JSON.stringify(state.get('sequencePlayList').toJS()));\r\n  let currentIndex = state.get('currentIndex');\r\n  //看看有没有同款\r\n  let fpIndex = findIndex(song, playList);\r\n  // 如果是当前歌曲直接不处理\r\n  if(fpIndex === currentIndex && currentIndex !== -1) return state;\r\n  currentIndex++;\r\n  // 把歌放进去,放到当前播放曲目的下一个位置\r\n  playList.splice(currentIndex, 0, song);\r\n  // 如果列表中已经存在要添加的歌\r\n  if(fpIndex > -1) {\r\n    if(currentIndex > fpIndex) {\r\n      playList.splice(fpIndex, 1);\r\n      currentIndex--;\r\n    } else {\r\n      playList.splice(fpIndex+1, 1);\r\n    }\r\n  }\r\n\r\n  let sequenceIndex = findIndex(playList[currentIndex], sequenceList) + 1;\r\n  let fsIndex = findIndex(song, sequenceList);\r\n  sequenceList.splice(sequenceIndex, 0, song);\r\n  if(fsIndex > -1) {\r\n    if(sequenceIndex > fsIndex) {\r\n      sequenceList.splice(fsIndex, 1);\r\n      sequenceIndex--;\r\n    } else {\r\n      sequenceList.splice(fsIndex + 1, 1);\r\n    }\r\n  }\r\n  return state.merge({\r\n    'playList': fromJS(playList),\r\n    'sequencePlayList': fromJS(sequenceList),\r\n    'currentIndex': fromJS(currentIndex),\r\n  });\r\n}\r\n\r\nconst handleDeleteSong = (state, song) => {\r\n  const playList = JSON.parse(JSON.stringify(state.get('playList').toJS()));\r\n  const sequenceList = JSON.parse(JSON.stringify(state.get('sequencePlayList').toJS()));\r\n  let currentIndex = state.get('currentIndex');\r\n\r\n  const fpIndex = findIndex(song, playList);\r\n  playList.splice(fpIndex, 1);\r\n  if(fpIndex < currentIndex) currentIndex--;\r\n  \r\n  const fsIndex = findIndex(song, sequenceList);\r\n  sequenceList.splice(fsIndex, 1);\r\n\r\n  return state.merge({\r\n    'playList': fromJS(playList),\r\n    'sequencePlayList': fromJS(sequenceList),\r\n    'currentIndex': fromJS(currentIndex),\r\n  });\r\n}\r\n\r\n\r\nexport default (state = defaultState, action) => {\r\n  switch(action.type) {\r\n    case actionTypes.SET_CURRENT_SONG:\r\n      return state.set('currentSong', action.data);\r\n    case actionTypes.SET_FULL_SCREEN:\r\n      return state.set('fullScreen', action.data);\r\n    case actionTypes.SET_PLAYING_STATE:\r\n      return state.set('playing', action.data);\r\n    case actionTypes.SET_SEQUECE_PLAYLIST:\r\n      return state.set('sequencePlayList', action.data);\r\n    case actionTypes.SET_PLAYLIST:\r\n      return state.set('playList', action.data);\r\n    case actionTypes.SET_PLAY_MODE:\r\n      return state.set('mode', action.data);\r\n    case actionTypes.SET_CURRENT_INDEX:\r\n      return state.set('currentIndex', action.data);\r\n    case actionTypes.SET_SHOW_PLAYLIST:\r\n      return state.set('showPlayList', action.data);\r\n    case actionTypes.INSERT_SONG:\r\n      return handleInsertSong(state, action.data);\r\n    case actionTypes.DELETE_SONG:\r\n      return handleDeleteSong(state, action.data);\r\n    case actionTypes.CHANGE_SPEED:\r\n      return state.set('speed', action.data);\r\n    default:\r\n      return state;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}