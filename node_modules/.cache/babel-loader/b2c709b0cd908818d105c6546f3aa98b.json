{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\86136\\\\Desktop\\\\\\u5B66\\u4E60\\u8FDB\\u5EA6\\\\new_html\\\\fullstack_yyf\\\\react\\\\cloud-music\\\\src\\\\application\\\\Player\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport MiniPlayer from './miniPlayer';\nimport NormalPlayer from './normalPlayer';\nimport { getSongUrl, isEmptyObject } from '../../api/utils';\nimport { changePlayingState, changeShowPlayList, changeCurrentIndex, changeCurrentSong, changePlayList, changePlayMode, changeFullScreen } from './store/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Player(props) {\n  _s();\n\n  //mock一份playList，后面直接从 redux 拿，现在只是为了调试播放效果。\n  const playList = [{\n    ftype: 0,\n    djId: 0,\n    a: null,\n    cd: '01',\n    crbt: null,\n    no: 1,\n    st: 0,\n    rt: '',\n    cf: '',\n    alia: ['手游《梦幻花园》苏州园林版推广曲'],\n    rtUrls: [],\n    fee: 0,\n    s_id: 0,\n    copyright: 0,\n    h: {\n      br: 320000,\n      fid: 0,\n      size: 9400365,\n      vd: -45814\n    },\n    mv: 0,\n    al: {\n      id: 84991301,\n      name: '拾梦纪',\n      picUrl: 'http://p1.music.126.net/M19SOoRMkcHmJvmGflXjXQ==/109951164627180052.jpg',\n      tns: [],\n      pic_str: '109951164627180052',\n      pic: 109951164627180050\n    },\n    name: '拾梦纪',\n    l: {\n      br: 128000,\n      fid: 0,\n      size: 3760173,\n      vd: -41672\n    },\n    rtype: 0,\n    m: {\n      br: 192000,\n      fid: 0,\n      size: 5640237,\n      vd: -43277\n    },\n    cp: 1416668,\n    mark: 0,\n    rtUrl: null,\n    mst: 9,\n    dt: 234947,\n    ar: [{\n      id: 12084589,\n      name: '妖扬',\n      tns: [],\n      alias: []\n    }, {\n      id: 12578371,\n      name: '金天',\n      tns: [],\n      alias: []\n    }],\n    pop: 5,\n    pst: 0,\n    t: 0,\n    v: 3,\n    id: 1416767593,\n    publishTime: 0,\n    rurl: null\n  }]; // 目前播放时间\n\n  const [currentTime, setCurrentTime] = useState(0); // 歌曲总时长\n\n  const [duration, setDuration] = useState(0); //记录当前的歌曲 以便于下次重渲染时比对是否是一首歌\n\n  const [preSong, setPreSong] = useState(); //歌曲播放进度\n\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\n  const {\n    fullScreen,\n    playing,\n    currentIndex,\n    currentSong: immutableCurrentSong\n  } = props;\n  const {\n    toggleFullScreenDispatch,\n    togglePlayingDispatch,\n    changeCurrentIndexDispatch,\n    changeCurrentDispatch\n  } = props;\n  let currentSong = immutableCurrentSong.toJS();\n  const audioRef = useRef();\n\n  const clickPlaying = (e, state) => {\n    e.stopPropagation();\n    togglePlayingDispatch(state);\n  };\n\n  useEffect(() => {\n    if (!currentSong) return;\n    changeCurrentIndexDispatch(0); //currentIndex 默认未 -1,临时改成0\n\n    let current = playList[0];\n    changeCurrentDispatch(current); //赋值 currentSong\n\n    audioRef.current.src = getSongUrl(current.id);\n    setTimeout(() => {\n      audioRef.current.play();\n    });\n    togglePlayingDispatch(true); //播放状态\n\n    setCurrentTime(0); //从头开始播放\n\n    setDuration(current.dt / 1000 | 0); //时长\n  }, []);\n  useEffect(() => {\n    playing ? audioRef.current.play() : audioRef.current.pause();\n  }, [playing]);\n\n  const updateTime = e => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const onProgressChange = curPercent => {\n    const newTime = curPercent * duration;\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n\n    if (!playing) {\n      togglePlayingDispatch(true);\n    }\n  }; // 一首歌循环\n\n\n  const handleLoop = () => {\n    audioRef.current.currentTime = 0;\n    changePlayingState(true);\n    audioRef.current.play();\n  }; // 播放上一首\n\n\n  const handlePrev = () => {\n    //播放列表只有一首歌的时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex - 1;\n    if (index < 0) index = playList.length - 1; // 队尾变队头\n\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  }; // 播放下一首\n\n\n  const handleNext = () => {\n    // 播放列表只有一首歌时单曲循环\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex + 1;\n    if (index === playList.length) index = 0;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(MiniPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      percent: percent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }, this), isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(NormalPlayer, {\n      song: currentSong,\n      fullScreen: fullScreen,\n      playing: playing,\n      duration: duration //总时长\n      ,\n      currentTime: currentTime //播放时长\n      ,\n      percent: percent //进度\n      ,\n      toggleFullScreen: toggleFullScreenDispatch,\n      clickPlaying: clickPlaying,\n      onProgressChange: onProgressChange,\n      handlePrev: handlePrev,\n      handleNext: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      onTimeUpdate: updateTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n} //映射 Redux 全局的 state 到组件的 props 上\n\n\n_s(Player, \"7WqAB+wB9q/rvJ2gFeiGhedmSKg=\");\n\n_c = Player;\n\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\n  playing: state.getIn([\"player\", \"playing\"]),\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\n  mode: state.getIn([\"player\", \"mode\"]),\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\n  playList: state.getIn([\"player\", \"playList\"]),\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\n}); //映射 dispatch 到 props 上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    togglePlayingDispatch(data) {\n      dispatch(changePlayingState(data));\n    },\n\n    toggleFullScreenDispatch(data) {\n      dispatch(changeFullScreen(data));\n    },\n\n    togglePlayListDispatch(data) {\n      dispatch(changeShowPlayList(data));\n    },\n\n    changeCurrentIndexDispatch(index) {\n      dispatch(changeCurrentIndex(index));\n    },\n\n    changeCurrentDispatch(data) {\n      dispatch(changeCurrentSong(data));\n    },\n\n    changeModeDispatch(data) {\n      dispatch(changePlayMode(data));\n    },\n\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    }\n\n  };\n}; // 将ui 组件 包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Player));\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/application/Player/index.js"],"names":["React","useRef","useState","useEffect","connect","MiniPlayer","NormalPlayer","getSongUrl","isEmptyObject","changePlayingState","changeShowPlayList","changeCurrentIndex","changeCurrentSong","changePlayList","changePlayMode","changeFullScreen","Player","props","playList","ftype","djId","a","cd","crbt","no","st","rt","cf","alia","rtUrls","fee","s_id","copyright","h","br","fid","size","vd","mv","al","id","name","picUrl","tns","pic_str","pic","l","rtype","m","cp","mark","rtUrl","mst","dt","ar","alias","pop","pst","t","v","publishTime","rurl","currentTime","setCurrentTime","duration","setDuration","preSong","setPreSong","percent","isNaN","fullScreen","playing","currentIndex","currentSong","immutableCurrentSong","toggleFullScreenDispatch","togglePlayingDispatch","changeCurrentIndexDispatch","changeCurrentDispatch","toJS","audioRef","clickPlaying","e","state","stopPropagation","current","src","setTimeout","play","pause","updateTime","target","onProgressChange","curPercent","newTime","handleLoop","handlePrev","length","index","handleNext","mapStateToProps","getIn","showPlayList","mode","sequencePlayList","mapDispatchToProps","dispatch","data","togglePlayListDispatch","changeModeDispatch","changePlayListDispatch","memo"],"mappings":"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","sourcesContent":["import React,{useRef,useState,useEffect} from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport MiniPlayer from './miniPlayer';\r\nimport NormalPlayer from './normalPlayer';\r\nimport { getSongUrl,isEmptyObject} from '../../api/utils';\r\n\r\nimport {\r\n    changePlayingState,\r\n    changeShowPlayList,\r\n    changeCurrentIndex,\r\n    changeCurrentSong,\r\n    changePlayList,\r\n    changePlayMode,\r\n    changeFullScreen\r\n} from './store/actionCreators';\r\n\r\nfunction Player(props){\r\n\r\n    //mock一份playList，后面直接从 redux 拿，现在只是为了调试播放效果。\r\n    const playList = [\r\n      {\r\n        ftype: 0,\r\n        djId: 0,\r\n        a: null,\r\n        cd: '01',\r\n        crbt: null,\r\n        no: 1,\r\n        st: 0,\r\n        rt: '',\r\n        cf: '',\r\n        alia: [\r\n          '手游《梦幻花园》苏州园林版推广曲'\r\n        ],\r\n        rtUrls: [],\r\n        fee: 0,\r\n        s_id: 0,\r\n        copyright: 0,\r\n        h: {\r\n          br: 320000,\r\n          fid: 0,\r\n          size: 9400365,\r\n          vd: -45814\r\n        },\r\n        mv: 0,\r\n        al: {\r\n          id: 84991301,\r\n          name: '拾梦纪',\r\n          picUrl: 'http://p1.music.126.net/M19SOoRMkcHmJvmGflXjXQ==/109951164627180052.jpg',\r\n          tns: [],\r\n          pic_str: '109951164627180052',\r\n          pic: 109951164627180050\r\n        },\r\n        name: '拾梦纪',\r\n        l: {\r\n          br: 128000,\r\n          fid: 0,\r\n          size: 3760173,\r\n          vd: -41672\r\n        },\r\n        rtype: 0,\r\n        m: {\r\n          br: 192000,\r\n          fid: 0,\r\n          size: 5640237,\r\n          vd: -43277\r\n        },\r\n        cp: 1416668,\r\n        mark: 0,\r\n        rtUrl: null,\r\n        mst: 9,\r\n        dt: 234947,\r\n        ar: [\r\n          {\r\n            id: 12084589,\r\n            name: '妖扬',\r\n            tns: [],\r\n            alias: []\r\n          },\r\n          {\r\n            id: 12578371,\r\n            name: '金天',\r\n            tns: [],\r\n            alias: []\r\n          }\r\n        ],\r\n        pop: 5,\r\n        pst: 0,\r\n        t: 0,\r\n        v: 3,\r\n        id: 1416767593,\r\n        publishTime: 0,\r\n        rurl: null\r\n      }\r\n    ];\r\n\r\n    // 目前播放时间\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n\r\n    // 歌曲总时长\r\n    const [duration, setDuration] = useState(0);\r\n\r\n    //记录当前的歌曲 以便于下次重渲染时比对是否是一首歌\r\n    const [preSong, setPreSong] = useState();\r\n    \r\n    //歌曲播放进度\r\n    let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\r\n\r\n    const { fullScreen ,playing, currentIndex,currentSong: immutableCurrentSong } = props;\r\n\r\n    const { toggleFullScreenDispatch,togglePlayingDispatch,changeCurrentIndexDispatch,changeCurrentDispatch} = props;\r\n\r\n    let currentSong = immutableCurrentSong.toJS();\r\n\r\n    const audioRef = useRef();\r\n\r\n    const clickPlaying = (e, state) => {\r\n      e.stopPropagation();\r\n      togglePlayingDispatch(state);\r\n    };\r\n\r\n    useEffect(() => {\r\n      if(!currentSong) return;\r\n      changeCurrentIndexDispatch(0);//currentIndex 默认未 -1,临时改成0\r\n      let current = playList[0];\r\n      changeCurrentDispatch(current);//赋值 currentSong\r\n      audioRef.current.src = getSongUrl(current.id);\r\n      setTimeout(() => {\r\n        audioRef.current.play();\r\n      });\r\n      togglePlayingDispatch(true); //播放状态\r\n      setCurrentTime(0); //从头开始播放\r\n      setDuration((current.dt / 1000) | 0); //时长\r\n    },[])\r\n\r\n    useEffect(() => {\r\n      playing ? audioRef.current.play() : audioRef.current.pause();\r\n    }, [playing]);\r\n\r\n    const updateTime = e => {\r\n      setCurrentTime(e.target.currentTime);\r\n    }\r\n\r\n    const onProgressChange = curPercent => {\r\n      const newTime = curPercent * duration;\r\n      setCurrentTime(newTime);\r\n      audioRef.current.currentTime = newTime;\r\n      if (!playing) {\r\n        togglePlayingDispatch(true);\r\n      }\r\n    };\r\n  \r\n    // 一首歌循环\r\n    const handleLoop = () => {\r\n      audioRef.current.currentTime = 0;\r\n      changePlayingState(true);\r\n      audioRef.current.play();\r\n    }\r\n\r\n    // 播放上一首\r\n    const handlePrev = () => {\r\n      //播放列表只有一首歌的时单曲循环\r\n      if(playList.length === 1){\r\n        handleLoop();\r\n        return;\r\n      }\r\n      let index = currentIndex - 1;\r\n      if(index < 0) index = playList.length - 1;// 队尾变队头\r\n      if(!playing) togglePlayingDispatch(true);\r\n      changeCurrentIndexDispatch(index);\r\n    }\r\n\r\n    // 播放下一首\r\n    const handleNext = () => {\r\n      // 播放列表只有一首歌时单曲循环\r\n      if(playList.length === 1){\r\n        handleLoop();\r\n        return;\r\n      }\r\n      let index= currentIndex + 1;\r\n      if(index === playList.length) index = 0;\r\n      if(!playing) togglePlayingDispatch(true);\r\n      changeCurrentIndexDispatch(index);\r\n    }\r\n    return (\r\n        <div>\r\n        { isEmptyObject(currentSong) ? null : \r\n          <MiniPlayer\r\n            song={currentSong}\r\n            fullScreen={fullScreen}\r\n            playing={playing}\r\n            toggleFullScreen={toggleFullScreenDispatch}\r\n            clickPlaying={clickPlaying}\r\n            percent={percent}\r\n          /> \r\n        }\r\n        { isEmptyObject(currentSong) ? null : \r\n          <NormalPlayer\r\n            song={currentSong}\r\n            fullScreen={fullScreen}\r\n            playing={playing}\r\n            duration={duration} //总时长\r\n            currentTime={currentTime}//播放时长\r\n            percent={percent}//进度\r\n            toggleFullScreen={toggleFullScreenDispatch}\r\n            clickPlaying={clickPlaying}\r\n            onProgressChange={onProgressChange}\r\n            handlePrev={handlePrev}\r\n            handleNext={handleNext}\r\n          />\r\n        }\r\n        <audio \r\n          ref={audioRef}\r\n          onTimeUpdate={updateTime}\r\n        ></audio>\r\n      </div>\r\n    )\r\n}\r\n\r\n//映射 Redux 全局的 state 到组件的 props 上\r\nconst mapStateToProps = state => ({\r\n    fullScreen: state.getIn ([\"player\", \"fullScreen\"]),\r\n    playing: state.getIn ([\"player\", \"playing\"]),\r\n    currentSong: state.getIn ([\"player\", \"currentSong\"]),\r\n    showPlayList: state.getIn ([\"player\", \"showPlayList\"]),\r\n    mode: state.getIn ([\"player\", \"mode\"]),\r\n    currentIndex: state.getIn ([\"player\", \"currentIndex\"]),\r\n    playList: state.getIn ([\"player\", \"playList\"]),\r\n    sequencePlayList: state.getIn ([\"player\", \"sequencePlayList\"])\r\n})\r\n\r\n//映射 dispatch 到 props 上\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n      togglePlayingDispatch (data) {\r\n        dispatch (changePlayingState (data));\r\n      },\r\n      toggleFullScreenDispatch (data) {\r\n        dispatch (changeFullScreen (data));\r\n      },\r\n      togglePlayListDispatch (data) {\r\n        dispatch (changeShowPlayList (data));\r\n      },\r\n      changeCurrentIndexDispatch (index) {\r\n        dispatch (changeCurrentIndex (index));\r\n      },\r\n      changeCurrentDispatch (data) {\r\n        dispatch (changeCurrentSong (data));\r\n      },\r\n      changeModeDispatch (data) {\r\n        dispatch (changePlayMode (data));\r\n      },\r\n      changePlayListDispatch (data) {\r\n        dispatch (changePlayList (data));\r\n      }\r\n    };\r\n};\r\n\r\n// 将ui 组件 包装成容器组件\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(React.memo(Player));"]},"metadata":{},"sourceType":"module"}