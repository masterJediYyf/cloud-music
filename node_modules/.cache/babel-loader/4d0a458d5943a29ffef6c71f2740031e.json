{"ast":null,"code":"import { SET_CURRENT_SONG, SET_FULL_SCREEN, SET_PLAYING_STATE, SET_SEQUECE_PLAYLIST, SET_PLAYLIST, SET_PLAY_MODE, SET_CURRENT_INDEX, SET_SHOW_PLAYLIST, DELETE_SONG, INSERT_SONG, CHANGE_SPEED } from './constants';\nimport { fromJS } from 'immutable';\nimport { getSongDetailRequest } from '../../../api/request';\nexport const changeCurrentSong = data => ({\n  type: SET_CURRENT_SONG,\n  data: fromJS(data)\n});\nexport const changeFullScreen = data => ({\n  type: SET_FULL_SCREEN,\n  data\n});\nexport const changePlayingState = data => ({\n  type: SET_PLAYING_STATE,\n  data\n});\nexport const changeSequecePlayList = data => ({\n  type: SET_SEQUECE_PLAYLIST,\n  data: fromJS(data)\n});\nexport const changePlayList = data => ({\n  type: SET_PLAYLIST,\n  data: fromJS(data)\n});\nexport const changePlayMode = data => ({\n  type: SET_PLAY_MODE,\n  data\n});\nexport const changeSpeed = data => ({\n  type: CHANGE_SPEED,\n  data\n});\nexport const changeCurrentIndex = data => ({\n  type: SET_CURRENT_INDEX,\n  data\n});\nexport const changeShowPlayList = data => ({\n  type: SET_SHOW_PLAYLIST,\n  data\n});\nexport const insertSong = data => ({\n  type: INSERT_SONG,\n  data\n});\nexport const deleteSong = data => ({\n  type: DELETE_SONG,\n  data\n}); // const insertSong = (dispatch, getState, song) => {\n//   const playList = JSON.parse(JSON.stringify(getState().getIn(['player', 'playList']).toJS()));\n//   const sequenceList = JSON.parse(JSON.stringify(getState().getIn(['player', 'sequencePlayList']).toJS()));\n//   let currentIndex = getState().getIn(['player', 'currentIndex']);\n//   //看看有没有同款\n//   let fpIndex = findIndex(song, playList);\n//   // 如果是当前歌曲直接不处理\n//   if(fpIndex === currentIndex && currentIndex != -1) return;\n//   currentIndex++;\n//   // 把歌放进去,放到当前播放曲目的下一个位置\n//   playList.splice(currentIndex, 0, song);\n//   console.log(playList)\n//   console.log(currentIndex)\n//   console.log(fpIndex)\n//   // 如果列表中已经存在要添加的歌\n//   if(fpIndex > -1) {\n//     if(currentIndex > fpIndex) {\n//       playList.splice(fpIndex, 1);\n//       currentIndex--;\n//     } else {\n//       playList.splice(fpIndex+1, 1);\n//     }\n//   }\n//   let sequenceIndex = findIndex(playList[currentIndex], sequenceList) + 1;\n//   sequenceList.splice(sequenceIndex, 0, song);\n//   let fsIndex = findIndex(song, sequenceList);\n//   if(fsIndex > -1) {\n//     if(currentIndex > fsIndex) {\n//       sequenceList.splice(fsIndex, 1);\n//       currentIndex--;\n//     } else {\n//       sequenceList.splice(fsIndex + 1, 1);\n//     }\n//   }\n//   dispatch(changePlayList(playList));\n//   dispatch(changeSequecePlayList(sequenceList));\n//   dispatch(changeCurrentIndex(currentIndex));\n// }\n\nexport const getSongDetail = id => {\n  return dispatch => {\n    getSongDetailRequest(id).then(data => {\n      let song = data.songs[0];\n      dispatch(insertSong(song));\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/application/Player/store/actionCreators.js"],"names":["SET_CURRENT_SONG","SET_FULL_SCREEN","SET_PLAYING_STATE","SET_SEQUECE_PLAYLIST","SET_PLAYLIST","SET_PLAY_MODE","SET_CURRENT_INDEX","SET_SHOW_PLAYLIST","DELETE_SONG","INSERT_SONG","CHANGE_SPEED","fromJS","getSongDetailRequest","changeCurrentSong","data","type","changeFullScreen","changePlayingState","changeSequecePlayList","changePlayList","changePlayMode","changeSpeed","changeCurrentIndex","changeShowPlayList","insertSong","deleteSong","getSongDetail","id","dispatch","then","song","songs"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,eAA3B,EAA4CC,iBAA5C,EAA+DC,oBAA/D,EAAqFC,YAArF,EAAmGC,aAAnG,EAAkHC,iBAAlH,EAAqIC,iBAArI,EAAwJC,WAAxJ,EAAqKC,WAArK,EAAkLC,YAAlL,QAAsM,aAAtM;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,oBAAT,QAAqC,sBAArC;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,IAAD,KAAW;AAC1CC,EAAAA,IAAI,EAAEf,gBADoC;AAE1Cc,EAAAA,IAAI,EAAEH,MAAM,CAACG,IAAD;AAF8B,CAAX,CAA1B;AAKP,OAAO,MAAME,gBAAgB,GAAKF,IAAD,KAAW;AAC1CC,EAAAA,IAAI,EAAEd,eADoC;AAE1Ca,EAAAA;AAF0C,CAAX,CAA1B;AAKP,OAAO,MAAMG,kBAAkB,GAAIH,IAAD,KAAW;AAC3CC,EAAAA,IAAI,EAAEb,iBADqC;AAE3CY,EAAAA;AAF2C,CAAX,CAA3B;AAKP,OAAO,MAAMI,qBAAqB,GAAIJ,IAAD,KAAW;AAC9CC,EAAAA,IAAI,EAAEZ,oBADwC;AAE9CW,EAAAA,IAAI,EAAEH,MAAM,CAACG,IAAD;AAFkC,CAAX,CAA9B;AAKP,OAAO,MAAMK,cAAc,GAAKL,IAAD,KAAW;AACxCC,EAAAA,IAAI,EAAEX,YADkC;AAExCU,EAAAA,IAAI,EAAEH,MAAM,CAACG,IAAD;AAF4B,CAAX,CAAxB;AAKP,OAAO,MAAMM,cAAc,GAAIN,IAAD,KAAW;AACvCC,EAAAA,IAAI,EAAEV,aADiC;AAEvCS,EAAAA;AAFuC,CAAX,CAAvB;AAKP,OAAO,MAAMO,WAAW,GAAIP,IAAD,KAAW;AACpCC,EAAAA,IAAI,EAAEL,YAD8B;AAEpCI,EAAAA;AAFoC,CAAX,CAApB;AAKP,OAAO,MAAMQ,kBAAkB,GAAIR,IAAD,KAAW;AAC3CC,EAAAA,IAAI,EAAET,iBADqC;AAE3CQ,EAAAA;AAF2C,CAAX,CAA3B;AAKP,OAAO,MAAMS,kBAAkB,GAAIT,IAAD,KAAW;AAC3CC,EAAAA,IAAI,EAAER,iBADqC;AAE3CO,EAAAA;AAF2C,CAAX,CAA3B;AAKP,OAAO,MAAMU,UAAU,GAAIV,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAEN,WAD6B;AAEnCK,EAAAA;AAFmC,CAAX,CAAnB;AAKP,OAAO,MAAMW,UAAU,GAAIX,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAEP,WAD6B;AAEnCM,EAAAA;AAFmC,CAAX,CAAnB,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMY,aAAa,GAAIC,EAAD,IAAQ;AACnC,SAAQC,QAAD,IAAc;AACnBhB,IAAAA,oBAAoB,CAACe,EAAD,CAApB,CAAyBE,IAAzB,CAA8Bf,IAAI,IAAI;AACpC,UAAIgB,IAAI,GAAGhB,IAAI,CAACiB,KAAL,CAAW,CAAX,CAAX;AACAH,MAAAA,QAAQ,CAACJ,UAAU,CAAEM,IAAF,CAAX,CAAR;AACD,KAHD;AAID,GALD;AAMD,CAPM","sourcesContent":["import { SET_CURRENT_SONG, SET_FULL_SCREEN, SET_PLAYING_STATE, SET_SEQUECE_PLAYLIST, SET_PLAYLIST, SET_PLAY_MODE, SET_CURRENT_INDEX, SET_SHOW_PLAYLIST, DELETE_SONG, INSERT_SONG, CHANGE_SPEED } from './constants';\r\nimport { fromJS } from 'immutable';\r\nimport { getSongDetailRequest } from '../../../api/request';\r\n\r\nexport const changeCurrentSong = (data) => ({\r\n  type: SET_CURRENT_SONG,\r\n  data: fromJS(data)\r\n});\r\n\r\nexport const changeFullScreen =  (data) => ({\r\n  type: SET_FULL_SCREEN,\r\n  data\r\n});\r\n\r\nexport const changePlayingState = (data) => ({\r\n  type: SET_PLAYING_STATE,\r\n  data\r\n});\r\n\r\nexport const changeSequecePlayList = (data) => ({\r\n  type: SET_SEQUECE_PLAYLIST,\r\n  data: fromJS(data)\r\n});\r\n\r\nexport const changePlayList  = (data) => ({\r\n  type: SET_PLAYLIST,\r\n  data: fromJS(data)\r\n});\r\n\r\nexport const changePlayMode = (data) => ({\r\n  type: SET_PLAY_MODE,\r\n  data\r\n});\r\n\r\nexport const changeSpeed = (data) => ({\r\n  type: CHANGE_SPEED,\r\n  data\r\n});\r\n\r\nexport const changeCurrentIndex = (data) => ({\r\n  type: SET_CURRENT_INDEX,\r\n  data\r\n});\r\n\r\nexport const changeShowPlayList = (data) => ({\r\n  type: SET_SHOW_PLAYLIST,\r\n  data\r\n});\r\n\r\nexport const insertSong = (data) => ({\r\n  type: INSERT_SONG,\r\n  data\r\n});\r\n\r\nexport const deleteSong = (data) => ({\r\n  type: DELETE_SONG,\r\n  data\r\n});\r\n\r\n// const insertSong = (dispatch, getState, song) => {\r\n//   const playList = JSON.parse(JSON.stringify(getState().getIn(['player', 'playList']).toJS()));\r\n//   const sequenceList = JSON.parse(JSON.stringify(getState().getIn(['player', 'sequencePlayList']).toJS()));\r\n//   let currentIndex = getState().getIn(['player', 'currentIndex']);\r\n//   //看看有没有同款\r\n//   let fpIndex = findIndex(song, playList);\r\n//   // 如果是当前歌曲直接不处理\r\n//   if(fpIndex === currentIndex && currentIndex != -1) return;\r\n//   currentIndex++;\r\n//   // 把歌放进去,放到当前播放曲目的下一个位置\r\n//   playList.splice(currentIndex, 0, song);\r\n//   console.log(playList)\r\n//   console.log(currentIndex)\r\n//   console.log(fpIndex)\r\n//   // 如果列表中已经存在要添加的歌\r\n//   if(fpIndex > -1) {\r\n//     if(currentIndex > fpIndex) {\r\n//       playList.splice(fpIndex, 1);\r\n//       currentIndex--;\r\n//     } else {\r\n//       playList.splice(fpIndex+1, 1);\r\n//     }\r\n//   }\r\n\r\n//   let sequenceIndex = findIndex(playList[currentIndex], sequenceList) + 1;\r\n//   sequenceList.splice(sequenceIndex, 0, song);\r\n//   let fsIndex = findIndex(song, sequenceList);\r\n//   if(fsIndex > -1) {\r\n//     if(currentIndex > fsIndex) {\r\n//       sequenceList.splice(fsIndex, 1);\r\n//       currentIndex--;\r\n//     } else {\r\n//       sequenceList.splice(fsIndex + 1, 1);\r\n//     }\r\n//   }\r\n//   dispatch(changePlayList(playList));\r\n//   dispatch(changeSequecePlayList(sequenceList));\r\n//   dispatch(changeCurrentIndex(currentIndex));\r\n// }\r\n\r\nexport const getSongDetail = (id) => {\r\n  return (dispatch) => {\r\n    getSongDetailRequest(id).then(data => {\r\n      let song = data.songs[0];\r\n      dispatch(insertSong( song));\r\n    })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}