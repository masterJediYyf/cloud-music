{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\86136\\\\Desktop\\\\\\u5B66\\u4E60\\u8FDB\\u5EA6\\\\new_html\\\\fullstack_yyf\\\\react\\\\cloud-music\\\\src\\\\application\\\\Player\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { changePlayingState, changeShowPlayList, changeCurrentIndex, changeCurrentSong, changePlayList, changePlayMode, changeFullScreen, changeSpeed } from \"./store/actionCreators\";\nimport { isEmptyObject, shuffle, findIndex, getSongUrl } from \"../../api/utils\";\nimport PlayList from \"./play-list/index\";\nimport Toast from \"./../../baseUI/toast/index\";\nimport Lyric from \"../../api/lyric-parser\";\nimport MiniPlayer from \"./mini-player\";\nimport NormalPlayer from \"./normal-player\";\nimport { playMode } from \"./../../api/config\";\nimport { getLyricRequest } from \"./../../api/request\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Player(props) {\n  _s();\n\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [currentPlayingLyric, setPlayingLyric] = useState(\"\");\n  const [modeText, setModeText] = useState(\"\");\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\n  const {\n    speed,\n    playing,\n    currentSong: immutableCurrentSong,\n    currentIndex,\n    playList: immutablePlayList,\n    mode,\n    sequencePlayList: immutableSequencePlayList,\n    fullScreen\n  } = props;\n  const {\n    togglePlayingDispatch,\n    togglePlayListDispatch,\n    changeCurrentIndexDispatch,\n    changeCurrentDispatch,\n    changePlayListDispatch,\n    changeModeDispatch,\n    toggleFullScreenDispatch,\n    changeSpeedDispatch\n  } = props;\n  const playList = immutablePlayList.toJS();\n  const sequencePlayList = immutableSequencePlayList.toJS();\n  const currentSong = immutableCurrentSong.toJS();\n  const [preSong, setPreSong] = useState({});\n  const audioRef = useRef();\n  const toastRef = useRef();\n  const currentLyric = useRef();\n  const currentLineNum = useRef(0);\n  const songReady = useRef(true);\n  useEffect(() => {\n    if (!playList.length || currentIndex === -1 || !playList[currentIndex] || playList[currentIndex].id === preSong.id || !songReady.current) return;\n    songReady.current = false;\n    let current = playList[currentIndex];\n    changeCurrentDispatch(current);\n    setPreSong(current);\n    setPlayingLyric(\"\");\n    audioRef.current.src = getSongUrl(current.id);\n    audioRef.current.autoplay = true;\n    audioRef.current.playbackRate = speed;\n    togglePlayingDispatch(true);\n    getLyric(current.id);\n    setCurrentTime(0);\n    setDuration(current.dt / 1000 | 0); // eslint-disable-next-line\n  }, [currentIndex, playList]);\n  useEffect(() => {\n    playing ? audioRef.current.play() : audioRef.current.pause();\n  }, [playing]);\n  useEffect(() => {\n    if (!fullScreen) return;\n\n    if (currentLyric.current && currentLyric.current.lines.length) {\n      handleLyric({\n        lineNum: currentLineNum.current,\n        txt: currentLyric.current.lines[currentLineNum.current].txt\n      });\n    }\n  }, [fullScreen]);\n\n  const handleLyric = ({\n    lineNum,\n    txt\n  }) => {\n    if (!currentLyric.current) return;\n    currentLineNum.current = lineNum;\n    setPlayingLyric(txt);\n  };\n\n  const getLyric = id => {\n    let lyric = \"\";\n\n    if (currentLyric.current) {\n      currentLyric.current.stop();\n    } // 避免songReady恒为false的情况\n\n\n    setTimeout(() => {\n      songReady.current = true;\n    }, 3000);\n    getLyricRequest(id).then(data => {\n      lyric = data.lrc && data.lrc.lyric;\n\n      if (!lyric) {\n        currentLyric.current = null;\n        return;\n      }\n\n      currentLyric.current = new Lyric(lyric, handleLyric, speed);\n      currentLyric.current.play();\n      currentLineNum.current = 0;\n      currentLyric.current.seek(0);\n    }).catch(() => {\n      currentLyric.current = \"\";\n      songReady.current = true;\n      audioRef.current.play();\n    });\n  };\n\n  const clickPlaying = (e, state) => {\n    e.stopPropagation();\n    togglePlayingDispatch(state);\n\n    if (currentLyric.current) {\n      currentLyric.current.togglePlay(currentTime * 1000);\n    }\n  };\n\n  const onProgressChange = curPercent => {\n    const newTime = curPercent * duration;\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n\n    if (!playing) {\n      togglePlayingDispatch(true);\n    }\n\n    if (currentLyric.current) {\n      currentLyric.current.seek(newTime * 1000);\n    }\n  };\n\n  const updateTime = e => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const handleLoop = () => {\n    audioRef.current.currentTime = 0;\n    togglePlayingDispatch(true);\n    audioRef.current.play();\n\n    if (currentLyric.current) {\n      currentLyric.current.seek(0);\n    }\n  };\n\n  const handlePrev = () => {\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex - 1;\n    if (index === 0) index = playList.length - 1;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const handleNext = () => {\n    if (playList.length === 1) {\n      handleLoop();\n      return;\n    }\n\n    let index = currentIndex + 1;\n    if (index === playList.length) index = 0;\n    if (!playing) togglePlayingDispatch(true);\n    changeCurrentIndexDispatch(index);\n  };\n\n  const handleEnd = () => {\n    if (mode === playMode.loop) {\n      handleLoop();\n    } else {\n      handleNext();\n    }\n  };\n\n  const changeMode = () => {\n    let newMode = (mode + 1) % 3;\n\n    if (newMode === 0) {\n      //顺序模式\n      changePlayListDispatch(sequencePlayList);\n      let index = findIndex(currentSong, sequencePlayList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"顺序循环\");\n    } else if (newMode === 1) {\n      //单曲循环\n      changePlayListDispatch(sequencePlayList);\n      setModeText(\"单曲循环\");\n    } else if (newMode === 2) {\n      //随机播放\n      let newList = shuffle(sequencePlayList);\n      let index = findIndex(currentSong, newList);\n      changePlayListDispatch(newList);\n      changeCurrentIndexDispatch(index);\n      setModeText(\"随机播放\");\n    }\n\n    changeModeDispatch(newMode);\n    toastRef.current.show();\n  };\n\n  const handleError = () => {\n    songReady.current = true;\n    handleNext();\n    alert(\"播放出错\");\n  };\n\n  const clickSpeed = newSpeed => {\n    changeSpeedDispatch(newSpeed);\n    audioRef.current.playbackRate = newSpeed;\n    currentLyric.current.changeSpeed(newSpeed);\n    currentLyric.current.seek(currentTime * 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(NormalPlayer, {\n      song: currentSong,\n      full: fullScreen,\n      playing: playing,\n      mode: mode,\n      percent: percent,\n      modeText: modeText,\n      duration: duration,\n      currentTime: currentTime,\n      currentLyric: currentLyric.current,\n      currentPlayingLyric: currentPlayingLyric,\n      speed: speed,\n      changeMode: changeMode,\n      handlePrev: handlePrev,\n      handleNext: handleNext,\n      onProgressChange: onProgressChange,\n      currentLineNum: currentLineNum.current,\n      clickPlaying: clickPlaying,\n      toggleFullScreenDispatch: toggleFullScreenDispatch,\n      togglePlayListDispatch: togglePlayListDispatch,\n      clickSpeed: clickSpeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }, this), isEmptyObject(currentSong) ? null : /*#__PURE__*/_jsxDEV(MiniPlayer, {\n      playing: playing,\n      full: fullScreen,\n      song: currentSong,\n      percent: percent,\n      clickPlaying: clickPlaying,\n      setFullScreen: toggleFullScreenDispatch,\n      togglePlayList: togglePlayListDispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PlayList, {\n      clearPreSong: setPreSong.bind(null, {})\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      onTimeUpdate: updateTime,\n      onEnded: handleEnd,\n      onError: handleError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      text: modeText,\n      ref: toastRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n} // 映射Redux全局的state到组件的props上\n\n\n_s(Player, \"IxBrlP5Qc0NYwpzbwhycARhZvF0=\");\n\n_c = Player;\n\nconst mapStateToProps = state => ({\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\n  playing: state.getIn([\"player\", \"playing\"]),\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\n  mode: state.getIn([\"player\", \"mode\"]),\n  speed: state.getIn([\"player\", \"speed\"]),\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\n  playList: state.getIn([\"player\", \"playList\"]),\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\n}); // 映射dispatch到props上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    togglePlayingDispatch(data) {\n      dispatch(changePlayingState(data));\n    },\n\n    toggleFullScreenDispatch(data) {\n      dispatch(changeFullScreen(data));\n    },\n\n    togglePlayListDispatch(data) {\n      dispatch(changeShowPlayList(data));\n    },\n\n    changeCurrentIndexDispatch(index) {\n      dispatch(changeCurrentIndex(index));\n    },\n\n    changeCurrentDispatch(data) {\n      dispatch(changeCurrentSong(data));\n    },\n\n    changeModeDispatch(data) {\n      dispatch(changePlayMode(data));\n    },\n\n    changePlayListDispatch(data) {\n      dispatch(changePlayList(data));\n    },\n\n    changeSpeedDispatch(data) {\n      dispatch(changeSpeed(data));\n    }\n\n  };\n}; // 将ui组件包装成容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Player));\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/86136/Desktop/学习进度/new_html/fullstack_yyf/react/cloud-music/src/application/Player/index.js"],"names":["React","useRef","useState","useEffect","connect","changePlayingState","changeShowPlayList","changeCurrentIndex","changeCurrentSong","changePlayList","changePlayMode","changeFullScreen","changeSpeed","isEmptyObject","shuffle","findIndex","getSongUrl","PlayList","Toast","Lyric","MiniPlayer","NormalPlayer","playMode","getLyricRequest","Player","props","currentTime","setCurrentTime","duration","setDuration","currentPlayingLyric","setPlayingLyric","modeText","setModeText","percent","isNaN","speed","playing","currentSong","immutableCurrentSong","currentIndex","playList","immutablePlayList","mode","sequencePlayList","immutableSequencePlayList","fullScreen","togglePlayingDispatch","togglePlayListDispatch","changeCurrentIndexDispatch","changeCurrentDispatch","changePlayListDispatch","changeModeDispatch","toggleFullScreenDispatch","changeSpeedDispatch","toJS","preSong","setPreSong","audioRef","toastRef","currentLyric","currentLineNum","songReady","length","id","current","src","autoplay","playbackRate","getLyric","dt","play","pause","lines","handleLyric","lineNum","txt","lyric","stop","setTimeout","then","data","lrc","seek","catch","clickPlaying","e","state","stopPropagation","togglePlay","onProgressChange","curPercent","newTime","updateTime","target","handleLoop","handlePrev","index","handleNext","handleEnd","loop","changeMode","newMode","newList","show","handleError","alert","clickSpeed","newSpeed","bind","mapStateToProps","getIn","showPlayList","mapDispatchToProps","dispatch","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  changePlayingState,\r\n  changeShowPlayList,\r\n  changeCurrentIndex,\r\n  changeCurrentSong,\r\n  changePlayList,\r\n  changePlayMode,\r\n  changeFullScreen,\r\n  changeSpeed\r\n} from \"./store/actionCreators\";\r\nimport { isEmptyObject, shuffle, findIndex, getSongUrl } from \"../../api/utils\";\r\nimport PlayList from \"./play-list/index\";\r\nimport Toast from \"./../../baseUI/toast/index\";\r\nimport Lyric from \"../../api/lyric-parser\";\r\nimport MiniPlayer from \"./mini-player\";\r\nimport NormalPlayer from \"./normal-player\";\r\nimport { playMode } from \"./../../api/config\";\r\nimport { getLyricRequest } from \"./../../api/request\";\r\n\r\nfunction Player(props) {\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [currentPlayingLyric, setPlayingLyric] = useState(\"\");\r\n  const [modeText, setModeText] = useState(\"\");\r\n\r\n  let percent = isNaN(currentTime / duration) ? 0 : currentTime / duration;\r\n\r\n  const {\r\n    speed,\r\n    playing,\r\n    currentSong:immutableCurrentSong,\r\n    currentIndex,\r\n    playList:immutablePlayList,\r\n    mode,\r\n    sequencePlayList: immutableSequencePlayList,\r\n    fullScreen\r\n  } = props;\r\n\r\n  const {\r\n    togglePlayingDispatch,\r\n    togglePlayListDispatch,\r\n    changeCurrentIndexDispatch,\r\n    changeCurrentDispatch,\r\n    changePlayListDispatch,\r\n    changeModeDispatch,\r\n    toggleFullScreenDispatch,\r\n    changeSpeedDispatch\r\n  } = props;\r\n\r\n  const playList = immutablePlayList.toJS();\r\n  const sequencePlayList = immutableSequencePlayList.toJS();\r\n  const currentSong = immutableCurrentSong.toJS();\r\n\r\n  const [preSong, setPreSong] = useState({});\r\n\r\n  const audioRef = useRef();\r\n  const toastRef = useRef();\r\n\r\n  const currentLyric = useRef();\r\n  const currentLineNum = useRef(0);\r\n  const songReady = useRef(true);\r\n \r\n  useEffect(() => {\r\n    if (\r\n      !playList.length ||\r\n      currentIndex === -1 ||\r\n      !playList[currentIndex] ||\r\n      playList[currentIndex].id === preSong.id ||\r\n      !songReady.current\r\n    )\r\n    return;\r\n    songReady.current = false;\r\n    let current = playList[currentIndex];\r\n    changeCurrentDispatch(current);\r\n    setPreSong(current);\r\n    setPlayingLyric(\"\");\r\n    audioRef.current.src = getSongUrl(current.id);\r\n    audioRef.current.autoplay = true;\r\n    audioRef.current.playbackRate = speed;\r\n    togglePlayingDispatch(true);\r\n    getLyric(current.id);\r\n    setCurrentTime(0);\r\n    setDuration((current.dt / 1000) | 0);\r\n    // eslint-disable-next-line\r\n  }, [currentIndex, playList]);\r\n\r\n  useEffect(() => {\r\n    playing ? audioRef.current.play() : audioRef.current.pause();\r\n  }, [playing]);\r\n\r\n  useEffect(() => {\r\n    if (!fullScreen) return;\r\n    if (currentLyric.current && currentLyric.current.lines.length) {\r\n      handleLyric({\r\n        lineNum: currentLineNum.current,\r\n        txt: currentLyric.current.lines[currentLineNum.current].txt\r\n      });\r\n    }\r\n  }, [fullScreen]);\r\n\r\n  const handleLyric = ({ lineNum, txt }) => {\r\n    if(!currentLyric.current)return;\r\n    currentLineNum.current = lineNum;\r\n    setPlayingLyric(txt);\r\n  };\r\n\r\n  const getLyric = id => {\r\n    let lyric = \"\";\r\n    if (currentLyric.current) {\r\n      currentLyric.current.stop();\r\n    }\r\n    // 避免songReady恒为false的情况\r\n    setTimeout(() => {\r\n      songReady.current = true;\r\n    }, 3000);\r\n    getLyricRequest(id)\r\n      .then(data => {\r\n        lyric = data.lrc && data.lrc.lyric;\r\n        if(!lyric) {\r\n          currentLyric.current = null;\r\n          return;\r\n        }\r\n        currentLyric.current = new Lyric(lyric, handleLyric, speed);\r\n        currentLyric.current.play();\r\n        currentLineNum.current = 0;\r\n        currentLyric.current.seek(0);\r\n      })\r\n      .catch(() => {\r\n        currentLyric.current = \"\";\r\n        songReady.current = true;\r\n        audioRef.current.play();\r\n      });\r\n  };\r\n\r\n  const clickPlaying = (e, state) => {\r\n    e.stopPropagation();\r\n    togglePlayingDispatch(state);\r\n    if(currentLyric.current) {\r\n      currentLyric.current.togglePlay(currentTime*1000);\r\n    }\r\n  };\r\n\r\n  const onProgressChange = curPercent => {\r\n    const newTime = curPercent * duration;\r\n    setCurrentTime(newTime);\r\n    audioRef.current.currentTime = newTime;\r\n    if (!playing) {\r\n      togglePlayingDispatch(true);\r\n    }\r\n    if (currentLyric.current) {\r\n      currentLyric.current.seek(newTime * 1000);\r\n    }\r\n  };\r\n\r\n  const updateTime = e => {\r\n    setCurrentTime(e.target.currentTime);\r\n  };\r\n\r\n  const handleLoop = () => {\r\n    audioRef.current.currentTime = 0;\r\n    togglePlayingDispatch(true);\r\n    audioRef.current.play();\r\n    if (currentLyric.current) {\r\n      currentLyric.current.seek(0);\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    if (playList.length === 1) {\r\n      handleLoop();\r\n      return;\r\n    }\r\n    let index = currentIndex - 1;\r\n    if (index === 0) index = playList.length - 1;\r\n    if (!playing) togglePlayingDispatch(true);\r\n    changeCurrentIndexDispatch(index);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (playList.length === 1) {\r\n      handleLoop();\r\n      return;\r\n    }\r\n    let index = currentIndex + 1;\r\n    if (index === playList.length) index = 0;\r\n    if (!playing) togglePlayingDispatch(true);\r\n    changeCurrentIndexDispatch(index);\r\n  };\r\n\r\n  const handleEnd = () => {\r\n    if (mode === playMode.loop) {\r\n      handleLoop();\r\n    } else {\r\n      handleNext();\r\n    }\r\n  };\r\n\r\n  const changeMode = () => {\r\n    let newMode = (mode + 1) % 3;\r\n    if (newMode === 0) {\r\n      //顺序模式\r\n      changePlayListDispatch(sequencePlayList);\r\n      let index = findIndex(currentSong, sequencePlayList);\r\n      changeCurrentIndexDispatch(index);\r\n      setModeText(\"顺序循环\");\r\n    } else if (newMode === 1) {\r\n      //单曲循环\r\n      changePlayListDispatch(sequencePlayList);\r\n      setModeText(\"单曲循环\");\r\n    } else if (newMode === 2) {\r\n      //随机播放\r\n      let newList = shuffle(sequencePlayList);\r\n      let index = findIndex(currentSong, newList);\r\n      changePlayListDispatch(newList);\r\n      changeCurrentIndexDispatch(index);\r\n      setModeText(\"随机播放\");\r\n    }\r\n    changeModeDispatch(newMode);\r\n    toastRef.current.show();\r\n  };\r\n  const handleError = () => {\r\n    songReady.current = true;\r\n    handleNext();\r\n    alert(\"播放出错\");\r\n  };\r\n\r\n  const clickSpeed = (newSpeed) => {\r\n    changeSpeedDispatch(newSpeed);\r\n    audioRef.current.playbackRate = newSpeed;\r\n    currentLyric.current.changeSpeed(newSpeed);\r\n    currentLyric.current.seek(currentTime*1000);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isEmptyObject(currentSong) ? null : (\r\n        <NormalPlayer\r\n          song={currentSong}\r\n          full={fullScreen}\r\n          playing={playing}\r\n          mode={mode}\r\n          percent={percent}\r\n          modeText={modeText}\r\n          duration={duration}\r\n          currentTime={currentTime}\r\n          currentLyric={currentLyric.current}\r\n          currentPlayingLyric={currentPlayingLyric}\r\n          speed={speed}\r\n          changeMode={changeMode}\r\n          handlePrev={handlePrev}\r\n          handleNext={handleNext}\r\n          onProgressChange={onProgressChange}\r\n          currentLineNum={currentLineNum.current}\r\n          clickPlaying={clickPlaying}\r\n          toggleFullScreenDispatch={toggleFullScreenDispatch}\r\n          togglePlayListDispatch={togglePlayListDispatch}\r\n          clickSpeed={clickSpeed}\r\n        ></NormalPlayer>\r\n      )}\r\n      {isEmptyObject(currentSong) ? null : (\r\n        <MiniPlayer\r\n          playing={playing}\r\n          full={fullScreen}\r\n          song={currentSong}\r\n          percent={percent}\r\n          clickPlaying={clickPlaying}\r\n          setFullScreen={toggleFullScreenDispatch}\r\n          togglePlayList={togglePlayListDispatch}\r\n        ></MiniPlayer>\r\n      )}\r\n\r\n      <PlayList clearPreSong={setPreSong.bind(null, {})}></PlayList>\r\n      <audio\r\n        ref={audioRef}\r\n        onTimeUpdate={updateTime}\r\n        onEnded={handleEnd}\r\n        onError={handleError}\r\n      ></audio>\r\n      <Toast text={modeText} ref={toastRef}></Toast>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 映射Redux全局的state到组件的props上\r\nconst mapStateToProps = state => ({\r\n  fullScreen: state.getIn([\"player\", \"fullScreen\"]),\r\n  playing: state.getIn([\"player\", \"playing\"]),\r\n  currentSong: state.getIn([\"player\", \"currentSong\"]),\r\n  showPlayList: state.getIn([\"player\", \"showPlayList\"]),\r\n  mode: state.getIn([\"player\", \"mode\"]),\r\n  speed: state.getIn([\"player\", \"speed\"]),\r\n  currentIndex: state.getIn([\"player\", \"currentIndex\"]),\r\n  playList: state.getIn([\"player\", \"playList\"]),\r\n  sequencePlayList: state.getIn([\"player\", \"sequencePlayList\"])\r\n});\r\n\r\n// 映射dispatch到props上\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    togglePlayingDispatch(data) {\r\n      dispatch(changePlayingState(data));\r\n    },\r\n    toggleFullScreenDispatch(data) {\r\n      dispatch(changeFullScreen(data));\r\n    },\r\n    togglePlayListDispatch(data) {\r\n      dispatch(changeShowPlayList(data));\r\n    },\r\n    changeCurrentIndexDispatch(index) {\r\n      dispatch(changeCurrentIndex(index));\r\n    },\r\n    changeCurrentDispatch(data) {\r\n      dispatch(changeCurrentSong(data));\r\n    },\r\n    changeModeDispatch(data) {\r\n      dispatch(changePlayMode(data));\r\n    },\r\n    changePlayListDispatch(data) {\r\n      dispatch(changePlayList(data));\r\n    },\r\n    changeSpeedDispatch(data) {\r\n      dispatch(changeSpeed(data));\r\n    }\r\n  };\r\n};\r\n\r\n// 将ui组件包装成容器组件\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(React.memo(Player));\r\n"]},"metadata":{},"sourceType":"module"}